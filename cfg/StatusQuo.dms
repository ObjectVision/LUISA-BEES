container Luisetta
:	IntegrityCheck = "GeoDmsVersion() >= 14.0099"  // 14.1.0 required for sub_or_null function
{
	container ConfigSettings : IsHidden = "True"
	{		
		container Overridable: Descr = "only this container is overridable with Tools->Options->ConfigSettings that sets user/machine specific overrides in the registry"
		{
			parameter<String> RunRegions: [ 'JrcRegion' ]; // @USERINPUT: Nuts1 or JrcRegion
			parameter<String> SourceRootDir   := '%SourceDataDir%/Forbiomod';
			parameter<String> LuisettaDataDir := '%SourceRootDir%/Luisetta';
			parameter<String> DGRegioDir      := '%SourceRootDir%/DGRegio';
		}
	}
	
	#include <Units.dms>
	#include <Geography.dms>
	#include <Classifications.dms>

	#include <MetaData.dms>
				
	#include <JrcFactorDataTempl.dms>
	
	container JrcFactorData := JrcFactorDataTempl(Geography/Lambert100mgrid);
	container StaticModelTypeNeighbourhoods
	{
		container MT_2012
		{
			container Small := for_each_ind('nedvat', Classifications/LU/ModelType/name, 'potential(float32(JrcFactorData/PrepareData/LandUseGrid_2012 == Classifications/LU/ModelType/V/'+Classifications/LU/ModelType/Name+'), /Parameters/FuncKernels/QueensNeighbours/Matr)'
			, Geography/Lambert100mgrid, float32, '%projdir%/Results/StaticModelTypeNeighbourhoods2012/Small/'+Classifications/LU/ModelType/name+'.TIF', 'gdalwrite.grid');
			container Large := for_each_ind('nedvat', Classifications/LU/ModelType/name, 'potential(float32(JrcFactorData/PrepareData/LandUseGrid_2012 == Classifications/LU/ModelType/V/'+Classifications/LU/ModelType/Name+'), /Parameters/FuncKernels/LinearDecay1km/Matr)'
			, Geography/Lambert100mgrid, float32, '%projdir%/Results/StaticModelTypeNeighbourhoods2012/Large/'+Classifications/LU/ModelType/name+'.TIF', 'gdalwrite.grid');
		}
		container MT_2018
		{
			container Small := for_each_ind('nedvat', Classifications/LU/ModelType/name, 'potential(float32(JrcFactorData/PrepareData/LandUseGrid == Classifications/LU/ModelType/V/'+Classifications/LU/ModelType/Name+'), /Parameters/FuncKernels/QueensNeighbours/Matr)'
			, Geography/Lambert100mgrid, float32, '%projdir%/Results/StaticModelTypeNeighbourhoods2018/Small/'+Classifications/LU/ModelType/name+'.TIF', 'gdalwrite.grid');
			container Large := for_each_ind('nedvat', Classifications/LU/ModelType/name, 'potential(float32(JrcFactorData/PrepareData/LandUseGrid == Classifications/LU/ModelType/V/'+Classifications/LU/ModelType/Name+'), /Parameters/FuncKernels/LinearDecay1km/Matr)'
			, Geography/Lambert100mgrid, float32, '%projdir%/Results/StaticModelTypeNeighbourhoods2018/Large/'+Classifications/LU/ModelType/name+'.TIF', 'gdalwrite.grid');
		}
	}
	
	#include <Parameters.dms>

	container LandUseModels: Using = "Units;Geography;Classifications", isHidden = "True"
	{
		#include <ModelTraits.dms>
		#include <DynaClueTimeStep100.dms>
		
		#include <JrcClueWrap.dms>
	}
	#include <Runs.dms>
	
	container GenerateAllLandSupplyCurves
	{
		parameter<string> Generate2020 := 'Ready', ExplicitSuppliers = "=AsList('Runs/'+Parameters/Meta/Run/Name+'/TimeSteps/P2020/ResultingState/OutputGeneration/SupplyCurves/GenerateAllCurves', ';')";
	}
	container GenerateAllLandPairSupplyCurves
	{
		parameter<string> Generate2020 := 'Ready', ExplicitSuppliers = "=AsList('Runs/'+Parameters/Meta/Run/Name+'/TimeSteps/P2020/ResultingState/OutputGeneration/CrossSupplyCurves/GenerateAllCurves', ';')";
	}
	container CompareResultsContainer;
	#include <GenerateEU.dms>
	#include <Templates.dms>

}
