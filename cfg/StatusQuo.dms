container Luisetta
:	IntegrityCheck = "GeoDmsVersion() >= 14.0099"  // 14.1.0 required for sub_or_null function
{
	container ConfigSettings : IsHidden = "True"
	{		
		container Overridable: Descr = "only this container is overridable with Tools->Options->ConfigSettings that sets user/machine specific overrides in the registry"
		{
			parameter<String> RunRegions: [ 'JrcRegion' ]; // @USERINPUT: Nuts1 or JrcRegion
			parameter<String> SourceRootDir   := '%SourceDataDir%/Forbiomod';
			parameter<String> LuisettaDataDir := '%SourceRootDir%/Luisetta';
			parameter<String> DGRegioDir      := '%SourceRootDir%/DGRegio';
		}
	}
	
	#include <Units.dms>
	#include <Geography.dms>
	#include <Classifications.dms>

	#include <MetaData.dms>
				
	#include <JrcFactorDataTempl.dms>
	
	container JrcFactorData := JrcFactorDataTempl(Geography/Lambert100mgrid);
	container StaticModelTypeNeighbourhoods
	{
		container MT_2012
		{
			container Small := for_each_ind('nedvat', Classifications/LU/ModelType/name, 'potential(float32(JrcFactorData/PrepareData/LandUseGrid_2012 == Classifications/LU/ModelType/V/'+Classifications/LU/ModelType/Name+'), /Parameters/FuncKernels/QueensNeighbours/Matr)'
			, Geography/Lambert100mgrid, float32, '%projdir%/Results/StaticModelTypeNeighbourhoods2012/Small/'+Classifications/LU/ModelType/name+'.TIF', 'gdalwrite.grid');
			container Large := for_each_ind('nedvat', Classifications/LU/ModelType/name, 'potential(float32(JrcFactorData/PrepareData/LandUseGrid_2012 == Classifications/LU/ModelType/V/'+Classifications/LU/ModelType/Name+'), /Parameters/FuncKernels/LinearDecay1km/Matr)'
			, Geography/Lambert100mgrid, float32, '%projdir%/Results/StaticModelTypeNeighbourhoods2012/Large/'+Classifications/LU/ModelType/name+'.TIF', 'gdalwrite.grid');
		}
		container MT_2018
		{
			container Small := for_each_ind('nedvat', Classifications/LU/ModelType/name, 'potential(float32(JrcFactorData/PrepareData/LandUseGrid == Classifications/LU/ModelType/V/'+Classifications/LU/ModelType/Name+'), /Parameters/FuncKernels/QueensNeighbours/Matr)'
			, Geography/Lambert100mgrid, float32, '%projdir%/Results/StaticModelTypeNeighbourhoods2018/Small/'+Classifications/LU/ModelType/name+'.TIF', 'gdalwrite.grid');
			container Large := for_each_ind('nedvat', Classifications/LU/ModelType/name, 'potential(float32(JrcFactorData/PrepareData/LandUseGrid == Classifications/LU/ModelType/V/'+Classifications/LU/ModelType/Name+'), /Parameters/FuncKernels/LinearDecay1km/Matr)'
			, Geography/Lambert100mgrid, float32, '%projdir%/Results/StaticModelTypeNeighbourhoods2018/Large/'+Classifications/LU/ModelType/name+'.TIF', 'gdalwrite.grid');
		}
	}
	
	#include <Parameters.dms>

	container LandUseModels: Using = "Units;Geography;Classifications", isHidden = "True"
	{
		#include <ModelTraits.dms>
		#include <DynaClueTimeStep100.dms>
		
		#include <JrcClueWrap.dms>
	}
	#include <Runs.dms>
	
	container GenerateAllLandSupplyCurves
	{
		parameter<string> Generate2020 := 'Ready', ExplicitSuppliers = "=AsList('Runs/'+Parameters/Meta/Run/Name+'/TimeSteps/P2020/ResultingState/OutputGeneration/SupplyCurves/GenerateAllCurves', ';')";
	}
	container GenerateAllLandPairSupplyCurves
	{
		parameter<string> Generate2020 := 'Ready', ExplicitSuppliers = "=AsList('Runs/'+Parameters/Meta/Run/Name+'/TimeSteps/P2020/ResultingState/OutputGeneration/CrossSupplyCurves/GenerateAllCurves', ';')";
	}
	container CompareResultsContainer
	{
		unit<uint8> Scenario:= range(uint8, 0b, 4b) { attribute<string> name: ['Reference', 'ProtectedGrassland', 'Extensification', 'Combined']; }
		unit<wpoint> domain_grid := /Geography/Lambert100mGrid;
		unit<uint8> VT := Classifications/LU/ViewType;
		unit<uint8> MT := Classifications/LU/ModelType;
		unit<uint16> Periods := Parameters/PeriodSet/result;
		
		template compare_t {
			attribute<MT> map_a(domain_grid);
			attribute<MT> map_b(domain_grid);
			
			attribute<MT> only_a(domain_grid) := map_a != map_b ? map_a : null_b;
			attribute<MT> only_b(domain_grid) := map_a != map_b ? map_b : null_b;
			unit<uint16> MT2 := combine_uint16(MT, MT)
			{
				attribute<string> from := first_rel->Label;
				attribute<string> to   := second_rel->Label;
			}
			
			attribute<MT2> combined_map(domain_grid) := combine_data(MT2, map_a, map_b);
			attribute<uint32> xtab(MT2) := pcount(combined_map);
			container xtab_xtable := for_each_nedv(MT/name, 'xtab[combine_data(MT2, ID(MT), '+string(id(MT))+'[MT])]', MT, uint32);
			unit<uint16> xtab_stable := select(xtab > 100)
			{
				attribute<string> from  := collect_by_cond(., MT2/from);
				attribute<string> to    := collect_by_cond(., MT2/to  );
				attribute<uint32> count := collect_by_cond(., xtab);
				attribute<float32> fraction := float32(count) / (sum_float32(xtab, MT2/first_rel)[collect_by_cond(., MT2/first_rel)]);
			}
		}
		
		template scenario_t {
			parameter<Scenario> scenario_rel;
			parameter<string> scenario_name := scenario_rel->name;
			parameter<string> DirName := '%projdir%/results/'+scenario_name+'/GUI/EU';
			container maps_VT := for_each_ndva(Periods/name, domain_grid, VT, DirName+'/LandUseVT_'+Periods/YearStr + '.tif');
			container maps_MT := for_each_nedv(Periods/name, 'maps_VT/'+Periods/name+'->MT', domain_grid, MT);
			container compares := for_each_ne(Periods/name, 'compare_t('+MakeDefined('maps_MT/'+Periods/name[sub_or_null(ID(Periods), 1w)], '/JrcFactorData/PrepareData/LandUseGrid')+', maps_MT/'+Periods/name+')');
			
			container compCLC18_2020   := compare_t ( /JrcFactorData/PrepareData/LandUseGrid , maps_MT/P2020 );
			container comp2020_2050    := compare_t(maps_MT/P2020, maps_MT/P2050);
			container compRef2050_2050 := compare_t(Reference/maps_MT/P2050, maps_MT/P2050);
			container compPG2050_2050  := compare_t(ProtectedGrassland/maps_MT/P2050, maps_MT/P2050);
			container compGE2050_2050  := compare_t(Extensification/maps_MT/P2050, maps_MT/P2050);
		}
		container landuse_data := for_each_ne(Scenario/name, 'scenario_t('+string(id(Scenario))+'[Scenario])');
	}
	#include <GenerateEU.dms>
	#include <Templates.dms>
	
	container Indicators
	{
		unit<uint8> MT := Classifications/LU/ModelType;
		unit<wpoint> domain_grid := /Geography/Lambert100mGrid ;
		unit<uint32> domain := ='union_unit('+AsItemList('Runs/'+Parameters/Meta/Run/Name+'/domain')+')', DialogType = "Map", DialogData = "BaseGrid"
		{
			attribute<domain_grid> grid_rel := ='union_data(domain, '+AsItemList('Runs/'+Parameters/Meta/Run/Name+'/domain/grid_rel[domain_grid]')+')';
			attribute<.> BaseGrid(domain_grid) := invert(grid_rel);
			attribute<MT> P2018 := /JrcFactorData/PrepareData/LandUseGrid[grid_rel];
			attribute<MT> P2020 := Classifications/LU/ViewType/MT[ /GenerateContainer/MozaikLandUse/Results/landuse/P2020[grid_rel] ];
			attribute<MT> P2045 := Classifications/LU/ViewType/MT[/GenerateContainer/MozaikLandUse/Results/landuse/P2045[grid_rel] ];
			attribute<MT> P2050 := Classifications/LU/ViewType/MT[/GenerateContainer/MozaikLandUse/Results/landuse/P2050[grid_rel] ];
		}
		unit<uint32> IndicatorRegionSrc := /Geography/AdministrativeBoundaries/LUISA_zones/RunAreas;
		unit<uint16> IndicatorRegion16  := cat_range(uint16, 0w, uint16(#IndicatorRegionSrc))
		{
			attribute<IndicatorRegionSrc> org_rel := value(ID(.), IndicatorRegionSrc);
//			attribute<string> 		ZoneId           := IndicatorRegionSrc/ZoneId  [org_rel];
			attribute<Geography/LambertEA> 	Geometry(polygon):= IndicatorRegionSrc/Geometry[org_rel];
			attribute<string>		Label            := IndicatorRegionSrc/Label   [org_rel], DialogType = "LabelText";
			attribute<.> per_grid(domain_grid) := poly2grid(Geometry, domain_grid);
			attribute<.> per_domain(domain) := per_grid[domain/grid_rel];
		}
		
		attribute</Geography/Regions/JrcRegion> JrcRegion_rel(domain) :=  poly2grid(/Geography/Regions/JrcRegion/geometry, domain_grid)[domain/grid_rel];
		parameter<string> EuOutputDirName := Parameters/ParamSets/ActiveSet/OutputFolderName+'/EU';
		container OutputGenerators := LandUseModels/ModelTraits/OutputGenerators;
		
		unit<uint16> Periods := /Parameters/PeriodSet/result;
		container P2020 := OutputGenerators/SharedIndicators(domain, domain/P2018, domain/P2018, domain/P2020, JrcFactorData, IndicatorRegion16, IndicatorRegion16/per_domain, EuOutputDirName+'/P2020', Periods/V/P2020);
		container P2050 := OutputGenerators/SharedIndicators(domain, domain/P2018, domain/P2045, domain/P2050, JrcFactorData, IndicatorRegion16, IndicatorRegion16/per_domain, EuOutputDirName+'/P2050', Periods/V/P2050);
	}
}
