container CompareDemands
{
	unit<int32> Percent := 0.01 * BaseUnit('', int32);
	
	container Classifications {
		unit<uint32> AllCountries := range(uint32, 0, 11) {
			attribute<string> name: [ 'Austria', 'BelgLux', 'Cyprus', 'Denmark', 'Estonia', 'Ireland', 'Italy', 'Malta', 'Netherlands', 'Slovakia', 'Slovenia'];
			attribute<string> code: [ 'AT', 'BL', 'CY', 'DK', 'EE', 'IE', 'IT', 'MT', 'NL', 'SK', 'SI' ];
		}
		unit<uint32> Country := range(uint32, 0, 9) {
			attribute<string> code: [ 'AT', 'CY', 'DK', 'EE', 'IE', 'IT', 'MT', 'NL','SI' ];
			attribute<string> name:= rjoin(code, AllCountries/code, AllCountries/name);
		}
		unit<uint32> AI := range(uint32, 0, 25) {
			attribute<Percent>  p : [ -20,  -15,  -10,   -9,   -8,   -7,   -6,   -5,   -4,   -3,   -2,   -1,    0,    1,    2,    3,    4,    5,    6,    7,    8,    9,   10,   15,   20  ];
			attribute<Float64>  f := float64(p) * (1.0 / float64(100[Percent])) + 1.0;
			attribute<string>   code : [ '80', '85', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '00', '01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '15', '20' ];
			attribute<string>   name  := 'AI'+code;	
		}
		unit<uint32> AW := range(uint32, 0, 5) {
			attribute<Percent>  p : [ 00,  05, 10, 15, 20  ];
			attribute<Float64>  f := float64(p) * (1.0 / float64(100[Percent]));
			attribute<string>   code : [ '00', '05', '10', '15', '20' ];
			attribute<string>   name  := 'AW'+code;	
		}
		unit<uint32> Year := range(uint32, 0, 8) {
			attribute<string> name  : [ 'P2015', 'P2020', 'P2025', 'P2030', 'P2035', 'P2040', 'P2045', 'P2050' ];
		}
		unit<uint32> ResultFile := combine(AW, AI, Country, Year)
		{
			attribute<string> name := AI/name[nr_2]+'_'+AW/name[nr_1]+'_'+Country/name[nr_3]+'_'+Year/name[nr_4];
			attribute<string> FileName := name+'_ShadowPrices.csv';
			attribute<string> graph_file_key := AW/name[nr_1]+'/'+Country/code[nr_3];
			attribute<string> graph_col_key  := Year/name[nr_4];
			attribute<Percent> graph_row_value := AI/p[nr_2];
			attribute<string>     graph_row_key   := AI/name[nr_2];
		}
		
	}
	container RawDataFiles := for_each_nxat(Classifications/ResultFile/name, uint32
		,	'%ProjDir%/results/StatusQuo/'+Classifications/ResultFile/FileName
		,	'gdal.vect'
		)
	,	SyncMode = "all"
	;
	container DataFiles	:= for_each_nex(Classifications/ResultFile/name, 'subset(!IsDefined(strpos(RawDataFiles/'+Classifications/ResultFile/name+'/ZoneID, '' '')))', uint32);
	
	unit<uint32> Data := ='union_unit('+AsItemList('DataFiles/'+Classifications/ResultFile/name)+')'
	{
		attribute<string> graph_file_key  := ='union_data(., '+AsItemList(Quote(Classifications/ResultFile/graph_file_key+'_')+'+RawDataFiles/'+Classifications/ResultFile/name+'/ZoneID[DataFiles/'+Classifications/ResultFile/name+'/nr_OrgEntity]')+')';
		attribute<string> graph_col_key   := ='union_data(., '+AsItemList(Quote(Classifications/ResultFile/graph_col_key))+')';
		attribute<float64> Arable_Price   := ='MakeDefined(Float64(union_data(., '+AsItemList('RawDataFiles/'+Classifications/ResultFile/name+'/Arable_Price[DataFiles/'+Classifications/ResultFile/name+'/nr_OrgEntity]')+')), 1e+10)';
		attribute<string> ResultFile_name := ='union_data(., '+AsItemList('const('+Quote(Classifications/ResultFile/name)+', DataFiles/'+Classifications/ResultFile/name+')')+')';
		attribute<Classifications/ResultFile> ResultFile_rel := rlookup(ResultFile_name, Classifications/ResultFile/name);
		attribute<Percent> graph_row_value := Classifications/ResultFile/graph_row_key[ResultFile_rel];
		attribute<string> graph_row_key   := Classifications/ResultFile/graph_row_key[ResultFile_rel];
		attribute<string> filerow_key := graph_file_key + graph_row_key;
	}
	
	container ExportData {
		unit <uint32> Files := unique(Data/graph_file_key)
		{
			attribute<.> per_Data(Data) := rlookup(Data/graph_file_key, Values);
			attribute<string> FileName := Values + '.csv';
			
			attribute<string> result
			:= 'ArableDemandFactor;'+AsList(Classifications/Year/name, ';')+'\n'
				+AsList(string(FileRow/result_line), '\n', FileRow/nr_1)
			,	StorageName = "%projdir%/results/CapriInteraction/MergedResults"
			,	StorageType = "strfiles"
			;
		}
		unit<uint32> FileRow := combine(Files, Classifications/AI) {
			attribute<Files>                File_rel := nr_1;
			attribute<string> FileRow_key := Files/Values[File_rel] + Classifications/AI/Name[nr_2];
			attribute<.> per_Data(Data) := rlookup(Data/FileRow_key, FileRow_key);
			
			attribute<string> result_line := string(classifications/AI/F[nr_2])+';'+AsList(string(Data/Arable_Price), ';', per_data);
			
		}
	}
}
