Container RegionalPopulation
{
	unit<uint32> projectionyears: expr = "GenUrbanDemands/projectionyears";
	
	Container Demands
	{			
		unit<uint32> PopYear: Expr = "projectionYears";
	
		container MinUrban: expr = "for_each_nedv(GenUrbanDemands/projectionYears/sYear, 'sum(GenUrbanDemands/Nuts2Data/min_urban_growth/'+ projectionYears/sYear +' + GenTourismDemands/Min_touristic_lu/' + projectionYears/sYear +', Nuts2/Nuts2_Merged_rel)', Nuts2_Merged, float32)";
		
		container MaxUrban: expr = "for_each_nedv(GenUrbanDemands/projectionYears/sYear, 'sum(GenUrbanDemands/Nuts2Data/max_urban_growth/'+ projectionYears/sYear +' + GenTourismDemands/Min_touristic_lu/' + projectionYears/sYear +', Nuts2/Nuts2_Merged_rel)', Nuts2_Merged, float32)";

		container Qj:		expr = "for_each_nedv(GenUrbanDemands/projectionYears/sYear, 'sum(GenUrbanDemands/Nuts2Data/Pop'+ string(GenUrbanDemands/projectionYears/Year) +', Nuts2/Nuts2_Merged_rel)', Nuts2_Merged, NrResidents)";
		
		container MinUrbGrowth: expr = "for_each_nedv(GenUrbanDemands/projectionYears/sYear, '((MinUrban/'+ projectionYears/sYear +' + sum(GenTourismDemands/urb_2006, Nuts2/Nuts2_Merged_rel)) - sum(GenTourismDemands/urb_2006, Nuts2/Nuts2_Merged_rel)) / sum(GenTourismDemands/urb_2006, Nuts2/Nuts2_Merged_rel)', Nuts2_Merged, float32)";
		
		container MaxPopDensities: expr = "for_each_nedv(GenUrbanDemands/projectionYears/sYear, 'sum(GenUrbanDemands/Nuts2Data/pop'+ string(projectionYears/Year) +', Nuts2/Nuts2_Merged_rel) / (sum(GenUrbanDemands/Nuts2Data/urb_2006, Nuts2/Nuts2_Merged_rel) + MinUrban/' + projectionYears/sYear + ')', Nuts2_Merged, float32)";
	}
	
	
	
	Container GenTourismDemands
	{
		attribute<Geography/Regions/Nuts0_LUISA> Country_rel (Geography/Regions/Nuts2_LUISA):	expr = "point_in_polygon(centroid_or_mid(Geography/Regions/Nuts2_LUISA/Geometry), Geography/Regions/Nuts0_LUISA/Geometry)";
		attribute<float32> beds_2006(Geography/Regions/Nuts2_LUISA):						expr = "rjoin(Geography/Regions/Nuts2_LUISA/ZoneId, Beds_historic/BodyDomain/Nuts2Code, Beds_historic/BodyDomain/Data/y2006)";
		attribute<float32> beds_2010(Geography/Regions/Nuts2_LUISA):						expr = "rjoin(Geography/Regions/Nuts2_LUISA/ZoneId, Beds_historic/BodyDomain/Nuts2Code, Beds_historic/BodyDomain/Data/y2010)";
		attribute<float32> beds_2012(Geography/Regions/Nuts2_LUISA):						expr = "rjoin(Geography/Regions/Nuts2_LUISA/ZoneId, Beds_historic/BodyDomain/Nuts2Code, Beds_historic/BodyDomain/Data/y2012)";
		attribute<float32> urb_1990 (Geography/Regions/Nuts2_LUISA): 						expr = "GenUrbanDemands/Nuts2Data/urb_1990";		
		attribute<float32> urb_2000 (Geography/Regions/Nuts2_LUISA): 						expr = "GenUrbanDemands/Nuts2Data/urb_2000";		
		attribute<float32> urb_2006 (Geography/Regions/Nuts2_LUISA): 						expr = "GenUrbanDemands/Nuts2Data/urb_2006";		
		attribute<float32> urb_2012 (Geography/Regions/Nuts2_LUISA): 						expr = "GenUrbanDemands/Nuts2Data/urb_2012";		
		
		attribute<float32> tourist_share (Geography/Regions/Nuts2_LUISA):					expr = "touristic_lu_2012 * float32(0.01) / urb_2012";
		
		parameter<string> 	arrivals_to_beds_function: expr = "'0.8155*log(arrivals) - 0.4396'"; //(ln(beds); ln(arrivals)
		parameter<float32> 	share_touristic_lu:		expr = "float32(0.0347)";
		
		
		
		container Arrivals 
		{
			// see http://www.objectvision.nl/geodms/configuration-examples/tablechopper
			parameter<String> PopProjFile: StorageName = "%ProjDir%/Demand/projected_arrivals.csv", StorageType = "str"; 
			parameter<String> HeaderLine: Expr = "ReadLines(PopProjFile, void, 0)";
			 parameter<Bool>   HeaderOK:   expr = "regex_match(HeaderLine, '[^,]++(,[^,]++)*+')";
			unit<uint32>  PopField: Expr = "range(uint32, 0, strcount(HeaderLine, ','))", IntegrityCheck = "HeaderOK"
			{
				attribute<String> Name: Expr = "ReadArray(HeaderLine, PopField, string, strpos(HeaderLine, ',')+1)";
				attribute<UInt16> Year: Expr = "UInt16(substr(Name, strlen(Name)-4, 4))";
			}
			unit<UInt32> BodyDomain: Expr = "Range(UInt32, 0, strcount(PopProjFile, '\n')-1)"
			{
				attribute<string> Line: Expr = "ReadLines(PopProjFile, BodyDomain, HeaderLine/ReadPos)";
				attribute<Bool> LinesAreNuts2CodeAndIntegers(BodyDomain): expr = "regex_match(Line, '[A-Z][A-Z]([A-Z]|[0-9])?+([A-Z]|[0-9])?+(,([0-9]++))*+')";
				
				attribute<String> Nuts2Code: Expr = "ReadElems(Line, string, const(0, BodyDomain))";//, IntegrityCheck = "LinesAreNuts2CodeAndIntegers";
				attribute<Geography/Regions/Nuts2_LUISA> Nuts2: Expr = "rlookup(Nuts2Code, Geography/Regions/Nuts2_LUISA/ZoneId)";
				container Data: Expr = 
					"for_each_nedv("
						" PopField/Name"
						",'ReadElems("
							" Line"
							",NrResidents"
							",'+MakeDefined("
							" PopField/Name[ID(PopField)-1]+'/ReadPos'"
							",'Nuts2Code/ReadPos'"
							")+'"
						")'"
						",BodyDomain"
						",NrResidents"
					")"
				{
					
				}
			}
		}
		container Beds_historic 
		{
			// see http://www.objectvision.nl/geodms/configuration-examples/tablechopper
			parameter<String> PopProjFile: StorageName = "%ProjDir%/Demand/beds_historic.csv", StorageType = "str"; 
			parameter<String> HeaderLine: Expr = "ReadLines(PopProjFile, void, 0)";
			 parameter<Bool>   HeaderOK:   expr = "regex_match(HeaderLine, '[^,]++(,[^,]++)*+')";
			unit<uint32>  PopField: Expr = "range(uint32, 0, strcount(HeaderLine, ','))", IntegrityCheck = "HeaderOK"
			{
				attribute<String> Name: Expr = "ReadArray(HeaderLine, PopField, string, strpos(HeaderLine, ',')+1)";
				attribute<UInt16> Year: Expr = "UInt16(substr(Name, strlen(Name)-4, 4))";
			}
			unit<UInt32> BodyDomain: Expr = "Range(UInt32, 0, strcount(PopProjFile, '\n')-1)"
			{
				attribute<string> Line: Expr = "ReadLines(PopProjFile, BodyDomain, HeaderLine/ReadPos)";
				attribute<Bool> LinesAreNuts2CodeAndIntegers(BodyDomain): expr = "regex_match(Line, '[A-Z][A-Z]([A-Z]|[0-9])?+([A-Z]|[0-9])?+(,([0-9]++))*+')";
				
				attribute<String> Nuts2Code: Expr = "ReadElems(Line, string, const(0, BodyDomain))";//, IntegrityCheck = "LinesAreNuts2CodeAndIntegers";
				attribute<Geography/Regions/Nuts2_LUISA> Nuts2: Expr = "rlookup(Nuts2Code, Geography/Regions/Nuts2_LUISA/ZoneId)";
				container Data: Expr = 
					"for_each_nedv("
						" PopField/Name"
						",'ReadElems("
							" Line"
							",NrResidents"
							",'+MakeDefined("
							" PopField/Name[ID(PopField)-1]+'/ReadPos'"
							",'Nuts2Code/ReadPos'"
							")+'"
						")'"
						",BodyDomain"
						",NrResidents"
					")";
			}
		}
	
		attribute<float32> touristic_lu_2006 (Geography/Regions/Nuts2_LUISA): 	expr = "float32(0.01) * ((sum(urb_2006 * float32(100), Country_rel)[Country_rel] * share_touristic_lu) * beds_2006) / sum(beds_2006, Country_rel)[Country_rel]";
		attribute<float32> touristic_lu_2012 (Geography/Regions/Nuts2_LUISA): 	expr = "float32(0.01) * ((sum(urb_2012 * float32(100), Country_rel)[Country_rel] * share_touristic_lu) * beds_2010) / sum(beds_2010, Country_rel)[Country_rel]";
		attribute<float32> beds_per_ha		 (Geography/Regions/Nuts0_LUISA):	expr = "sum(beds_2012, Country_rel) / sum(urb_2012 * share_touristic_lu, Country_rel)";
		
		unit<uint32> Beds_modelled_2011: expr = "Geography/Regions/Nuts2_LUISA" 
		{
			attribute<float32> modelled: expr = "float32(0.8155) * log(rjoin(Geography/Regions/Nuts2_LUISA/ZoneId, Arrivals/BodyDomain/Nuts2Code, Arrivals/BodyDomain/Data/y2011))  - float32(0.4396)";
			attribute<float32> observed: expr = "log(rjoin(Geography/Regions/Nuts2_LUISA/ZoneId, Beds_historic/BodyDomain/Nuts2Code, Beds_historic/BodyDomain/Data/y2011))";
			attribute<float32> error:	 expr = "observed - modelled";
			parameter<float32> rel_error:expr = "sum(abs(error)) / sum(observed)";
		}
		
		container Beds_modelled: expr = "for_each_nedv(projectionYears/year < uint16(2055) ? projectionYears/sYear : '', 'exp(float32(0.8155) * "
			"log(rjoin(Geography/Regions/Nuts2_LUISA/ZoneId, Arrivals/BodyDomain/Nuts2Code, Arrivals/BodyDomain/Data/y'+ string(projectionYears/year) +')) - float32(0.4396))', "
			"Geography/Regions/Nuts2_LUISA, float32)"
		{
			attribute<float32> beds_dif (Geography/Regions/Nuts2_LUISA): expr = "s2012 - beds_2012";
		}
		
		container Beds_projected: expr = "for_each_nedv(projectionYears/year > uint16(2006) ? projectionYears/sYear : '', "
			"'beds_2006 + (Beds_modelled/' + projectionYears/sYear + ' - Beds_modelled/s2012)',"
			"Geography/Regions/Nuts2_LUISA, float32)";
		
		container Modelled_Touristic_lu: expr = "for_each_nedv(projectionYears/year > uint16(2006) ? projectionYears/sYear : '', "
			"'(Beds_projected/' + projectionYears/sYear + ' / beds_per_ha[Country_rel]) - touristic_lu_2012', " 
			"Geography/Regions/Nuts2_LUISA, float32)";
		
		container Min_touristic_lu: 	expr = "for_each_nedv(projectionYears/sYear, "
			"ProjectionYears/Year > uint16(2012) ? 'Modelled_Touristic_lu/'+projectionYears/sYear+' * (float32(1) - float32('+ string(Beds_modelled_2011/rel_error)+'))' : 'touristic_lu_2012',"	
			"Geography/Regions/Nuts2_LUISA, float32)";
		
		container Max_touristic_lu: 	expr = "for_each_nedv(projectionYears/sYear, "
			"ProjectionYears/Year > uint16(2012) ? 'Modelled_Touristic_lu/'+projectionYears/sYear+' * (float32(1) + float32('+ string(Beds_modelled_2011/rel_error)+'))' : 'touristic_lu_2012',"	
			"Geography/Regions/Nuts2_LUISA, float32)";
	}
	
	Container GenUrbanDemands
	{	
		unit<uint32> PopYear: Expr = "projectionYears";
		
		unit<uint32> projectionYears: expr = "unique(TableChopper/PopField/year > uint16(2012) && TableChopper/PopField/year < uint16(2051) ? TableChopper/PopField/year: uint16(2012))" 
		{
			attribute<string> sYear: expr = "'s' + string(Values)"; 
			attribute<uint16> year: expr = "Values";
			attribute<uint16> prevyear: expr = "id(.) = 0 ? uint16(2006) : Values[id(.) - 1]";
		}
	
		container TableChopper 
		{
			// see http://www.objectvision.nl/geodms/configuration-examples/tablechopper
			parameter<String> PopProjFile: StorageName = "%ProjDir%/Demand/popproj.csv", StorageType = "str"; 
			parameter<String> HeaderLine: Expr = "ReadLines(PopProjFile, void, 0)";
			 parameter<Bool>   HeaderOK:   expr = "regex_match(HeaderLine, '[^,]++(,[^,]++)*+')";
			unit<uint32>  PopField: Expr = "range(uint32, 0, strcount(HeaderLine, ','))", IntegrityCheck = "HeaderOK"
			{
				attribute<String> Name: Expr = "ReadArray(HeaderLine, PopField, string, strpos(HeaderLine, ',')+1)";
				attribute<UInt16> Year: Expr = "uppercase(substr(Name,0,3)) = 'POP' ? UInt16(substr(Name, strlen(Name)-4, 4)) : Uint16(0 / 0)";
			}
			unit<UInt32> BodyDomain: Expr = "Range(UInt32, 0, strcount(PopProjFile, '\n')-1)"
			{
				attribute<string> Line: Expr = "ReadLines(PopProjFile, BodyDomain, HeaderLine/ReadPos)";
				attribute<Bool> LinesAreNuts2CodeAndIntegers(BodyDomain): expr = "regex_match(Line, '[A-Z][A-Z]([A-Z]|[0-9])?+([A-Z]|[0-9])?+(,([0-9]++))*+')";
				
				attribute<String> Nuts2Code: Expr = "ReadElems(Line, string, const(0, BodyDomain))";//, IntegrityCheck = "LinesAreNuts2CodeAndIntegers";
				attribute<Geography/Regions/Nuts2> Nuts2: Expr = "rlookup(Nuts2Code, Geography/Regions/Nuts2/code)";
				container Data: Expr = 
					"for_each_nedv("
						" PopField/Name"
						",'ReadElems("
							" Line"
							",NrResidents"
							",'+MakeDefined("
							" PopField/Name[ID(PopField)-1]+'/ReadPos'"
							",'Nuts2Code/ReadPos'"
							")+'"
						")'"
						",BodyDomain"
						",NrResidents"
					")";
			}
		}

		
		// parameters below are used to define a household size convergence path
		parameter<float32> end_household_size: 	expr = "float32(1.8)";
		parameter<uint16> begin_year:			expr = "uint16(2012)";
		parameter<uint16> end_year:				expr = "uint16(2150)";
		
		unit<uint32> bu_paneldata: expr = "union_unit(Geography/Regions/Nuts2_LUISA, Geography/Regions/Nuts2_LUISA)"
		{
			attribute<uint32>  i:		expr = "uint32(union_data(., id(Geography/Regions/Nuts2_LUISA), id(Geography/Regions/Nuts2_LUISA)))";
			attribute<uint32>  t:	  	expr = "union_data(., const(2000,Geography/Regions/Nuts2_LUISA,uint32), const(2011,Geography/Regions/Nuts2_LUISA,uint32))";
			attribute<float32> areai: 	expr = "union_data(., Geography/Regions/Nuts2_LUISA/km2, Geography/Regions/Nuts2_LUISA/km2)";
			attribute<float32> prevbu:  expr = "union_data(., Nuts2Data/urb_1990, Nuts2Data/urb_2000)";
			attribute<float32> bu:		expr = "union_data(., Nuts2Data/urb_2000, Nuts2Data/urb_2011)";
			attribute<float32> prevhh:	expr = "makedefined(union_data(., Nuts2Data/hh_1990, Nuts2Data/hh_2000), float32(0))";
			attribute<float32> hh:		expr = "makedefined(union_data(., Nuts2Data/hh_2000, value(Nuts2Data/hh_2011, float32)), float32(0))";
			attribute<float32> prevpop:	expr = "makedefined(union_data(., Nuts2Data/hpop1990, Nuts2Data/hpop2000), float32(0))";
			attribute<float32> pop:		expr = "makedefined(union_data(., Nuts2Data/hpop2000, Nuts2Data/pop2010), float32(0))";
			
			
		}
		
		container Nuts2Data: Expr = 
			"for_each_nedv("
				"TableChopper/PopField/Name,"
				"'max_elem(rjoin(Geography/Regions/Nuts2_LUISA/ZoneId, TableChopper/BodyDomain/Nuts2Code, TableChopper/BodyDomain/Data/'+TableChopper/PopField/Name+'), 0[float32])',"
				"Geography/Regions/Nuts2_LUISA,float32"
			")"
		{
			container hh_per_period: 
				expr = "for_each_nedv(projectionYears/sYear, "
			 	"'MakeDefined(hhs_' + string(begin_year) + ' + (((end_household_size - hhs_' + string(begin_year) + ') / float32(end_year - begin_year)) * float32(uint16('+ string(projectionYears/Values) +') - begin_year)), end_household_size)',"
				"Geography/Regions/Nuts2_LUISA, float32)";
			
			attribute<float32> h_dens_1990 (Geography/Regions/Nuts2_LUISA): expr = "(hpop1990 / hhs_1990) / ((urb_1990 > float32(0) ? urb_1990: urb_2000 * (mean(urb_1990) / mean(urb_2000))) * (float32(1) - GenTourismDemands/share_touristic_lu))";
			attribute<float32> h_dens_2000 (Geography/Regions/Nuts2_LUISA): expr = "(hpop2000 / hhs_2000) / ((urb_2000 > float32(0) ? urb_2000: urb_2011) * (float32(1) - GenTourismDemands/share_touristic_lu))";
			attribute<float32> h_dens_2011 (Geography/Regions/Nuts2_LUISA): expr = "hh_2011 / (urb_2011 * (float32(1) - GenTourismDemands/share_touristic_lu))";
			attribute<float32> h_dens_2006 (Geography/Regions/Nuts2_LUISA): expr = "(hpop2006 / hhs_2006) / (urb_2006 * (float32(1) - GenTourismDemands/share_touristic_lu))";
			
			attribute<float32> urb_1990	 	(Geography/Regions/Nuts2_LUISA): expr = "rjoin(Geography/Regions/Nuts2_LUISA/Code, historical_urban_counts/TableChopper/BodyDomain/Nuts2Code, historical_urban_counts/TableChopper/BodyDomain/Data/urb_1990)";
			attribute<float32> urb_2000	 	(Geography/Regions/Nuts2_LUISA): expr = "rjoin(Geography/Regions/Nuts2_LUISA/Code, historical_urban_counts/TableChopper/BodyDomain/Nuts2Code, historical_urban_counts/TableChopper/BodyDomain/Data/urb_2000)";
			attribute<float32> urb_2006		(Geography/Regions/Nuts2_LUISA): expr = "p_urb_2006_v1 > float32(0) ? p_urb_2006_v1 : p_urb_2006_v3";
			attribute<float32> urb_2011		(Geography/Regions/Nuts2_LUISA): expr = "urb_2012";
			attribute<float32> urb_2012		(Geography/Regions/Nuts2_LUISA): expr = "sum(float32(Classifications/LU/ModelType/IsUrban[LandUseData/CLC_100m/LC2012/ModelData]), Geography/AdministrativeBoundaries/RegionGrids/NUTS2_LUISA)";
			
			attribute<float32> p_urb_2006_v1(Geography/Regions/Nuts2_LUISA): expr = "rjoin(Geography/Regions/Nuts2_LUISA/Code, historical_urban_counts/TableChopper/BodyDomain/Nuts2Code, historical_urban_counts/TableChopper/BodyDomain/Data/urb_2006_v1_cor)";
			attribute<float32> p_urb_2006_v3(Geography/Regions/Nuts2_LUISA): expr = "rjoin(Geography/Regions/Nuts2_LUISA/Code, historical_urban_counts/TableChopper/BodyDomain/Nuts2Code, historical_urban_counts/TableChopper/BodyDomain/Data/urb_2006_v3_cor)";
						
			attribute<float32> growth_to_2011 (Geography/Regions/Nuts2_LUISA): expr = "urb_2011 / urb_2000";
			attribute<float32> cor_ghsl_comp  (Geography/Regions/Nuts2_LUISA): expr = "urb_2011 / urb_2006";
			attribute<bool>	   toomuchgrowth  (Geography/Regions/Nuts2_LUISA): expr = "growth_to_2011 > float32(1.25)";
			
			attribute<float32> hh_1990		  (Geography/Regions/Nuts2_LUISA): expr = "hpop1990 / hhs_1990";
			attribute<float32> hh_2000		  (Geography/Regions/Nuts2_LUISA): expr = "hpop2000 / hhs_2000";
			
			attribute<float32> hhs_2012		 	(Geography/Regions/Nuts2_LUISA): expr = "pop2012 / hh_2011";
			attribute<float32> pop2012			(Geography/Regions/Nuts2_LUISA): expr = "pop2010 + (float32(3)*((pop2015-pop2010)/float32(5)))";
			
			attribute<float32> urb_2000_comp (Geography/Regions/Nuts2_LUISA): expr = "sum(float32(LandUseData/CLC_100m/LC2000/ModelData = uint8(0)), /JrcFactorData/Nuts2_LUISA)";
			
			// old definition (baseline '14)
			//attribute<float32> trend_dens	(Geography/Regions/Nuts2): expr = "((((h_dens_2000) - log(h_dens_1990)) + (log(h_dens_2011) - log(h_dens_1990))) / float32(3)) / "
			//	" ((float32(1)^float32(2) + float32(10)^float32(2) + float32(21)^float32(2)) / float32(3))";
			
			attribute<float32> trend_dens	(Geography/Regions/Nuts2_LUISA): expr = 
				"float32(0.5) * ((((h_dens_2000) / (h_dens_1990)) - float32(1)) /  float32(10)) + "
				"float32(0.5) * ((((h_dens_2011) / (h_dens_2000)) - float32(1)) /  float32(11))";
			 	
			attribute<float32>	relative_error	(Geography/Regions/Nuts2_LUISA): expr = "abs(h_dens_2011 - (h_dens_1990 * (float32(21)^trend_dens))) / h_dens_2011";	
			attribute<float32>  model_deviation (Geography/Regions/Nuts2_LUISA): expr = "min_elem(relative_error, float32(0.33))";
			
			container density_results: 
				expr = "for_each_nedv(projectionYears/sYear, "
				"'MakeDefined(h_dens_2011 * ((float32('+ string(projectionYears/Values) +') - float32(begin_year)) ^ (trend_dens)), h_dens_2011)', "
				"Geography/Regions/Nuts2_LUISA, float32)";
			
				
				
			container pop_growth:
				expr = "for_each_nedv(projectionYears/sYear, "
				"'pop'+ string(projectionYears/Values) +' / pop2012', "
				"Geography/Regions/Nuts2_LUISA, float32)";
			
			container modelled_urban_growth: 
				expr = "for_each_nedv(projectionYears/sYear, "
				"'((pop'+ string(projectionYears/Values) + ' / hh_per_period/' + string(projectionYears/sYear) + ') / (density_results/'+ projectionYears/sYear +')) - ((float32(1) - GenTourismDemands/share_touristic_lu) * urb_2011)', "
				"Geography/Regions/Nuts2_LUISA, float32)";
			
			container urban_change:
				expr = "for_each_nedv(projectionYears/sYear, "
				"'(((urb_2012 * (float32(1) - GenTourismDemands/share_touristic_lu))) + min_urban_growth/' + projectionYears/sYear + ') / lo',"
				"Geography/Regions/Nuts2_LUISA, float32)";
	//		{parameter<float32> overall_2050min: expr = "sum(p_urb_2006_v3 + min_urban_growth/s2050) / sum(p_urb_2006_v3)";	
		//	parameter<float32> overall_2050max: expr = "sum(p_urb_2006_v3 + max_urban_growth/s2050) / sum(p_urb_2006_v3)";}	
				
			container min_urban_growth:
				expr = "for_each_nedv(projectionYears/sYear, "	
				"'(modelled_urban_growth/' + projectionYears/sYear + ' - abs(modelled_urban_growth/' + projectionYears/sYear + ' * model_deviation)) - modelled_urban_growth/s2012', "
				"Geography/Regions/Nuts2_LUISA, float32)";
			
			container max_urban_growth:
				expr = "for_each_nedv(projectionYears/sYear, "	
				"'modelled_urban_growth/' + projectionYears/sYear + '- modelled_urban_growth/s2012', "
				"Geography/Regions/Nuts2_LUISA, float32)";
				
			
			// below code used to generate a to some degree dynamic function of urban demand.
			container EmpiricalModelDemand: expr = "loop(getRepetitiveModelResults, uint16(#ProjectionYears - 1))";
			
			container getRepetitiveModelResults: IsTemplate = "true"
			{
			   parameter<uint16> NrIter;
				
			   container currValue
			   {
					//attribute<float32> urb 		(Geography/Regions/Nuts2): expr = "= NrIter = uint16(0) ? 'urb_2006' : 'Iter' + string(NrIter) + '/results/new_urb'";
					attribute<float32> urb 	(Geography/Regions/Nuts2_LUISA): expr = "urb_2006";
					attribute<float32> pop	(Geography/Regions/Nuts2_LUISA): expr = "= 'pop' + string(ProjectionYears/PrevYear[uint32(NrIter)+ 1])";
			   }
			   container nextValue
			   {
				  attribute<float32> pop (Geography/Regions/Nuts2_LUISA): expr = "= 'pop' + string(ProjectionYears/Values[uint32(NrIter)+ 1])";
				  attribute<float32> fpop(Geography/Regions/Nuts2_LUISA): expr = "pop / currValue/pop";
				  attribute<float32> grow(Geography/Regions/Nuts2_LUISA): expr = "exp(float32(0.0057636) + (float32(-0.1535581) * ((currValue/urb / float32(100)) / Geography/Regions/Nuts2_LUISA/km2)) + (float32(0.1112195) *  pop / currValue/pop))";
				  attribute<float32> urb (Geography/Regions/Nuts2_LUISA): expr = "currValue/urb * grow";
				  
			   }
			   container results;
			   
			}


			
				
		}
		
	}
	
	container historical_urban_counts
	{
	
		
		container TableChopper 
		{
			parameter<String> PopProjFile: StorageName = "%ProjDir%/Demand/hist_urban_counts.csv", StorageType = "str"; 
			parameter<String> HeaderLine: Expr = "ReadLines(PopProjFile, void, 0)";
			 parameter<Bool>   HeaderOK:   expr = "regex_match(HeaderLine, '[^,]++(,[^,]++)*+')";
			unit<uint32>  PopField: Expr = "range(uint32, 0, strcount(HeaderLine, ','))", IntegrityCheck = "HeaderOK"
			{
				attribute<String> Name: Expr = "ReadArray(HeaderLine, PopField, string, strpos(HeaderLine, ',')+1)";
				attribute<UInt16> Year: Expr = "UInt16(substr(Name, strlen(Name)-4, 4))";
			}
			unit<UInt32> BodyDomain: Expr = "Range(UInt32, 0, strcount(PopProjFile, '\n')-1)"
			{
				attribute<string> Line: Expr = "ReadLines(PopProjFile, BodyDomain, HeaderLine/ReadPos)";
				attribute<Bool> LinesAreNuts2CodeAndIntegers(BodyDomain): expr = "regex_match(Line, '[A-Z][A-Z]([A-Z]|[0-9])?+([A-Z]|[0-9])?+(,([0-9]++))*+')";
				
				attribute<String> Nuts2Code: Expr = "ReadElems(Line, string, const(0, BodyDomain))";//, IntegrityCheck = "LinesAreNuts2CodeAndIntegers";
				attribute<Geography/Regions/Nuts2> Nuts2: Expr = "rlookup(Nuts2Code, Geography/Regions/Nuts2/code)";
				container Data: Expr = 
					"for_each_nedv("
						" PopField/Name"
						",'ReadElems("
							" Line"
							",float32"
							",'+MakeDefined("
							" PopField/Name[ID(PopField)-1]+'/ReadPos'"
							",'Nuts2Code/ReadPos'"
							")+'"
						")'"
						",BodyDomain"
						",float32"
					")";
			}
		}
	}
	
}