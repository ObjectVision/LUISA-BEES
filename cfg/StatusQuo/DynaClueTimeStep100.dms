container DynaClueTimeStep100:	IsTemplate = "True"
{
	parameter<YearRange> CurrYear;
	parameter<UInt16> PeriodID;
	parameter<Float32> ClaimFraction;
	
	unit<UInt8>  ModelType;
	unit<WPoint> domain_grid;
	unit<UInt32> domain;
	unit<uint16> OrgPopClaimRegion;
	unit<uint16> DestPopClaimRegion;
	
	container PrevState;

	// ======== end of template parameters
	
	parameter<float32>   ComingPeriodLength:		Expr = "Periods/PeriodLength[PeriodId]";
	
	container HousingStock {
		
		attribute<DestPopClaimRegion>UrbanProjectionRegionRel	(domain): Expr = "= '(RunRegions/RasterSets/'+CaseData/RegionRefs[uint8(0)] +')[domain/grid_rel]'";
		
		attribute<DestPopClaimRegion>  	 	Regionrel	  		(domain): Expr = "CaseData/DestPopRasterLink[domain/grid_rel]";
		
		attribute<float32>  mean_urb_dens 						(DestPopClaimRegion): expr = "sum(float32(ModelType/isUrban[PrevState/landuse]) * PrevState/Qi, RegionRel) / sum(float32(ModelType/isUrban[PrevState/landuse]), RegionRel)";
		
		attribute<float32>  Si			(domain): expr = "switch("
			"case(PrevState/LandUse != ModelType/Urban && ResultingState/LandUse = ModelType/Urban, float32(0.5) * (mean_urb_dens[RegionRel] + PrevState/Variables/Neigh_Si)), "
			"case(PrevState/Si = float32(0) && ResultingState/LandUse != ModelType/Urban, prevState/Qi), "
			"case(PrevState/S_Agei >= Rules/SupplyChange, PrevState/Qi), "
			"PrevState/Si)";
		attribute<Year>	   	S_Agei 		(domain): Expr = "Si = PrevState/Si ? PrevState/S_Agei + Parameters/PeriodSet/result/PeriodLength[PeriodId]: 0[Year]"; // 0 years if supply has changed in a year
	}
	
	container Demographics {
		
		unit<uint16> PopProjectionZones: 		Expr = "OrgPopClaimRegion";
		unit<uint16> PopModelZones: 			Expr = "DestPopClaimRegion";

		attribute<PopModelZones>  	 	Regionrel	  		(domain): Expr = "CaseData/DestPopRasterLink[domain/grid_rel]";
		
		container NaturalChanges {
			container PopulationStock {
				attribute<float32> summed (domain): expr = "PrevState/Qi";
			}
		}
		container InternalMovements {
			container RemainingStock {
				attribute<float32> summed (domain): expr = "NaturalChanges/PopulationStock/summed * (float32(1) - float32(0.036)^ComingPeriodLength)";
			}
		}
		container ProjectedTotals {
			
			container Proto_Pop1 {
				attribute<float32> summed (PopProjectionZones): 
					expr = "sum(Parameters/DemandSets/Global/PopProjections/Data/Pop[Claims/ClaimTableSelections/Population/sel/Nr_OrgEntity], "
				 "DemandSet/Global/PopProjections/Data/ZoneRel[Claims/ClaimTableSelections/Population/sel/Nr_OrgEntity])[PopProjectionZones/Nr_OrgEntity]";
			}
			container Population {
				attribute<float32> summed (PopModelZones): 
					expr = "(MakeDefined(sum(Proto_Pop1/summed[Claims/Conversions/urban/crossTab/nr_1] * Claims/Conversions/urban/crossTab/orgzone_weight, "
					"Claims/Conversions/urban/crossTab/nr_2), float32(0)))";
			}
		}
		container Kj {
			attribute<float32> summed (PopModelZones): expr = "ProjectedTotals/Population/summed - sum(InternalMovements/RemainingStock/summed, RegionRel)";
		}	
		attribute<bool>	   popdecline 	(PopModelZones):   Expr = "Kj/summed < float32(0)";
	}
	
	container Claims : Expr = "ModelTraits/ClaimTablegenerators/ClaimTemplate(ModelType)";

	container DynamicComponent: Expr = "SuitabilityGenerator/CalcSuitability(domain)";

	container FeasibleSolution; // NYI, Reserved for future use
	container ScaledTransPot := for_each_nedv(ModelType/Name, 'Int32(DynamicComponent/TransPot/'+ModelType/Name+' * CaseData/SuitScaleFactor)', domain, Int32);
	parameter<Int32> Threshold := Int32(value(-9999, EUR_M2) * CaseData/SuitScaleFactor);
	
	attribute<Bool> BelowThresholdMap(domain) := ='and('+AsItemList(Replace('MakeDefined(ScaledTransPot/@LUT, Threshold - 1i) < Threshold','@LUT',ModelType/Name))+')';

	attribute<uint8> check (modeltype): expr = "rlookup(CaseData/DestClaimTableName, CaseData/UniqueDestRegionRefs/Values)";
	attribute<string> demandregions (modeltype): expr = "CaseData/UniqueDestRegionRefs/Values[check]";
	
	container d_alloc :=
		discrete_alloc(ModelType/Name, domain, 
		   ScaledTransPot, 
		   MakeDefined(rlookup(CaseData/DestClaimTableName, CaseData/UniqueDestRegionRefs/Values), UInt8(0)), 
		   CaseData/UniqueDestRegionRefs/Values, 
		   CaseData/AtomicRegions, 
		   CaseData/AtomicRegions/UnionData, 
		
		   Claims/DemandMin, 
		   Claims/DemandMax, 
		   Threshold,
//		   Int32(value(0 / 0, EUR_HA)), // Dit is de threshold! GEEN Threshold => geen dis-allowed cells
		   FeasibleSolution
		 )
	{
		attribute<ModelType> landuse(domain);
	}
	
	container PopulationDistribution: expr = "ModelTraits/PopulationDistribution(domain, DestPopClaimRegion, CaseData/DestPopRasterLink[domain/grid_rel])";
	
	parameter<String> TimeStepDirName: Expr = "simulation_results/metadata/DirName + '/'+Periods/Name[PeriodID]";
	
	container ResultingState
	{	
		//		"case(Allowed/ggModelMatr/TransitionCode> int16(1000), 'PrevState/Age == value('+String(Allowed/ggModelMatr/TransitionCode-int16(100))+', YearDiffRage)'),"

		parameter<YearRange> RefTime: Expr = "CurrYear";
		
		attribute<ModelType> AllocLandUse(domain): Expr = "d_alloc/landuse", IntegrityCheck = "cumulStatusFlag";
		attribute<ModelType> LandUse_EUCS(domain): Expr = "=Rules/PostProcStep";
		//attribute<bool>		becomesUrban 			(domain): Expr = "((Qi >= Rules/AbandonmentThreshold) && (PrevState/LandUse == Classifications/LU/ModelType/Urban)) || (Qi > Rules/UrbanizationThreshold) || CaseData/getOptimalk/ProbableTouristFacility";
		//attribute<bool>		becomesAbandonedUrban	(domain): Expr = "(LandUse_EUCS == Classifications/LU/ModelType/Urban || LandUse_EUCS == Classifications/LU/ModelType/AbanUrban) && "
		//	"Qi < Rules/AbandonmentThreshold && Qi < PrevState/Qi && !CaseData/getOptimalk/ProbableTouristFacility";	
		//attribute<bool>		 ViolatesCap (domain): Expr = "becomesUrban && !DynamicComponent/Population/claimPopCapi/urbanAllowed";
		attribute<ModelType> LandUse     (domain): Expr = "LandUse_EUCS", Label = "= 'Land use ' + string(RefTime)";
		attribute<ModelType> LandUse_Grid(domain_grid): Expr = "LandUse[domain/BasisGrid]";
		attribute<int32>	 Qi_Grid	 (domain_grid): Expr = "int32(Qi)[domain/BasisGrid]";

		attribute<bool > HasChanged(domain): Expr = "LandUse != PrevState/LandUse";
	
		attribute<YearDiffRange> Age(domain): Expr = "(HasChanged ? value(0, YearDiffRange) : PrevState/Age) + 1[YearDiffRange]";
		
		attribute<float32> 			Si(domain): 				  			Expr = "HousingStock/Si", Label = "= 'Housing Supply ' + string(RefTime)";
		attribute<Year> S_Agei	   (domain): 				  				Expr = "HousingStock/S_Agei", Label = "= 'Age of housing supply ' + string(RefTime)";
		attribute<float32> Qi(domain):                 						Expr = "PopulationDistribution/Qi", Label = "= 'Qi ' + string(RefTime)"; //, IntegrityCheck = "DynamicComponent/Population/Solved";
		attribute<float32> Qj(DestPopClaimRegion): 							Expr = "Sum(PopulationDistribution/Qi, CaseData/DestPopRasterLink[domain/grid_rel])", Label = "= 'Qj ' + string(RefTime)";
		attribute<float32> PotQi (domain): 									Expr = "MakeDefined(potential(Qi[domain/BasisGrid], Parameters/FuncKernels/RooksNeighbours/Matr)[domain/grid_rel] / StartingState/NeighboursWeight, 0[float32])";

		attribute<float32> PopDensity_km2 (domain): 						Expr = "MakeDefined(potential(Qi[domain/BasisGrid], Parameters/FuncKernels/Area1km2/AbsWeight)[domain/grid_rel] , 0[NrResidents])";		
			
		container PopulationBreakdown: expr = ""; // reference to allocated population
			
		container Variables: expr = "for_each_nedv(Factors/Name, Factors/DynExpr, domain, float32)";
		
/*		container regionalFactors: expr = "for_each_ne(CaseData/AllRegionRefs/Values, 'rules/Templates/getRegionalVariables('+ quote(CaseData/AllRegionRefs/Values) +')')"
		{
			//attribute<float32> ClaimPop (OrgPopClaimRegion): expr = "Claims/proto_Pop1";
			//attribute<float32> AllocPop	(OrgPopClaimRegion): expr = "Sum(DynamicComponent/Population/Qi, CaseData/OrgPopRasterLink[domain/grid_rel])";
			
			container ClaimPop: 		expr = "Claims/proto_Pop1";
			container AllocPop:			expr = "for_each_nedv(MetaData/PopulationCharacteristics/Name, 'Sum(PopulationBreakdown/'+MetaData/PopulationCharacteristics/Name+', CaseData/OrgPopRasterLink[domain/grid_rel])',OrgPopClaimRegion, float32)";
			
			unit<uint32> UrbanClaimZoneMatrix: expr = "CaseData/NetworkAnalysis/urbanclaimzones_x_urbanclaimzones" 
			{
				attribute<float32> tij: expr = "DynamicComponent/DynamicAccessibility/UrbanClaimZoneMatrix/tij";
			}
			unit<uint32> ms_rel: expr = "MetaData/RegionalFactorDefinitions/ModelSpecificFactorsList";	
			unit<uint16> UrbanZones: expr = "= 'RunRegions/UnitSets/' + MetaData/DemandCharacteristics/OrgRegion[MetaData/DemandCharacteristics/Urban]";
			attribute<float32> touristic_lu (UrbanZones): expr = "sum(CaseData/JrcFactorData/Tourism/touristic_lu[Claims/Conversions/OrgTouristicToOrgUrban/crossTab/nr_1] * Claims/Conversions/OrgTouristicToOrgUrban/crossTab/orgzone_weight, Claims/Conversions/OrgTouristicToOrgUrban/crossTab/nr_2)";
//			attribute<float32> touristic_lu (UrbanZones): expr = "Claims/DynamicDemandModels/tourism_induced_urban/proj_Touristic"; // new code, more realistic touristic, no sudden jumps in residential density
			container ModelSpecificFactors: expr = "for_each_nednv(ms_rel/Name, ms_rel/RegExpr + '[RunRegions/UnitSets/'+ ms_rel/TargetZones +'/nr_OrgEntity]', RunRegions/UnitSets, ms_rel/TargetZones, float32)";
		}*/
		
		unit<SPoint> ForestNeigbourhood: Expr = "Range(domain_grid, point(Int16(-10),Int16(-10)), point(Int16(11), Int16(11)))" // TODO: Move to outsize template to avoid duplicate instantiation
		{
			attribute<UInt32>  Dist2: Expr = "dist2(point(int16(0),int16(0),ForestNeigbourhood), uint32)";
			attribute<Float64> Dist:  Expr = "sqrt(Float64(dist2))";
			attribute<Float32> Weight: Expr = "Float32( ScaleSum( Dist <= 10.0 && Dist > 0.0 ? 1.0 / (3.0 + Dist) : 0.0, 1.0 ) )";
		}
		
		container ForestPotential: 
			Expr = 
				"for_each_nedv("
					"Classifications/LU/ForestType/Name, "
					"'potential(Float32(PrevState/ForestType == UInt8('+String(ID(Classifications/LU/ForestType))+')), ForestNeigbourhood/Weight)', "
					"domain_grid, Float32"
				")";
		
		attribute<Classifications/LU/ForestType>    ForestType(domain_grid): 
			Expr = 
				"switch("
					"case(LandUse_Grid <> ModelType/ForestsMature || LandUse_Grid <> ModelType/ForestsYoung || not(IsDefined(LandUse_Grid)), Classifications/LU/ForestType/NoForest)," // if current land use is no (longer) forest
					"case(PrevState/ForestType > UInt8(0), PrevState/ForestType),"                                                     // if it already was a kind of forest
					"case(ForestPotential/Mixed       > ForestPotential/BroadLeaved && ForestPotential/Mixed       > ForestPotential/Coniferous, Classifications/LU/ForestType/Mixed )," // Mixed dominates
					"case(ForestPotential/BroadLeaved > ForestPotential/Coniferous , Classifications/LU/ForestType/BroadLeaved),"      // BroadLeaved dominates or is equal to Mixed
					"case(ForestPotential/Coniferous  > ForestPotential/BroadLeaved, Classifications/LU/ForestType/Coniferous ),"      // Coniferous  dominates or is equal to Mixed
				"Classifications/LU/ForestType/Mixed" // BroadLeaved must then be equal to Coniferous so Mixed is the default value
				")";

		parameter<bool> cumulStatusFlag: Expr = "and(PrevState/cumulStatusFlag, d_alloc/statusFlag)";
		
//		container endstate;	
		container OutputGeneration:= ModelTraits/OutputGenerators/OutputGenerator(domain_grid, domain, TimeStepDirName);
			
//	NYI: ALSO WRITE: TotalSuitability
		parameter<string> GeneratedFiles: 
			Expr = "PrevState/GeneratedFiles + ';' + TimeStepDirName",
			ExplicitSuppliers = "LandUse;OutputGeneration/Results";
	}
}
