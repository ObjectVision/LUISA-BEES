container AdministrativeBoundaries
{
	
	parameter<uint32> NrBoundarySets := 6;
	parameter<uint32> NrAttributes   := 5;
	
	unit<uint32> BoundarySets := range(uint32, 0, NrBoundarySets)
	{
		unit<uint32> inElements := range(uint32, 0, NrBoundarySets * NrAttributes)
		{
			attribute<string> elements: [
				// name						//shape location	//shape name		//Idfield     //label field					
				'NUTS0_LUISA',				'NUTS/LUISA',		'n0_jul16',			'First_N2_3', 'First_N2_3', 	
				'NUTS1_LUISA',				'NUTS/LUISA',		'n1_jul16',			'NUTS_CODE',  'NUTS_CODE',	
				'NUTS2_merged_LUISA',		'NUTS/LUISA',		'n2_merged_jul16',	'merge',      'merge',		
				'NUTS2_LUISA',				'NUTS/LUISA',		'n2_jul16',			'NUTS_CODE',  'NUTS_CODE',	
				'NUTS3_LUISA',				'NUTS/LUISA',		'NUTS_RG_01M_2013_3035_LEVL_3',			'NUTS_ID',    'NUTS_ID',	//NUTS3_2013 downloaded from estat jan 14 2020
				'NUTS3_EuroStat',			'NUTS/EuroStat',	'Nuts3',			'NUTS_CODE2', 'NUTS_CODE2'];
		}
		attribute<string> Name: 		expr = "inElements/elements[((id(.)*NrAttributes)+0)[inElements]]";
		attribute<string> Dir: 			expr = "inElements/elements[((id(.)*NrAttributes)+1)[inElements]]";
		attribute<string> File: 		expr = "inElements/elements[((id(.)*NrAttributes)+2)[inElements]]";
		attribute<string> IDfield: 		expr = "inElements/elements[((id(.)*NrAttributes)+3)[inElements]]";
		attribute<string> Labelfield: 	expr = "inElements/elements[((id(.)*NrAttributes)+4)[inElements]]";
		attribute<string> Path:			expr = "Dir + '/' + File";
		attribute<string> uniName:		expr = "Name";
		
	}
		
	container src := for_each_ne(BoundarySets/uniName, 'doLoadFiles('+ quote(BoundarySets/Path) +','+ quote(BoundarySets/IDfield) +','+ quote(BoundarySets/Labelfield) +')')
	{
		container LAU2            := doLoadFiles ('LAU/LAU_2018_meters', 'replace(GISCO_ID, ''_'', '''')','LAU_LABEL');
		container LAU_spain_patch := doLoadFiles ('LAU/LAU_spain_patch', 'LAU_CODE','LAU_LABEL');
	}
	
	container aggregations
	{
		container LAU2 := doAggregateSets(src/LAU2/inFile, src/LAU_spain_patch/inFile);
	}
	container BoundaryDomains
	{
		unit<uint32> RunAreas := LUISA_zones/RunAreas
		{
			attribute<string> RunAreaId := ZoneID;
		}
		unit<uint32> ForestDemandRegions := LUISA_zones/ForestDemandRegions;
		
		unit<uint32> NUTS0_LUISA        := src/NUTS0_LUISA/inFile;
		unit<uint32> NUTS1_LUISA        := src/NUTS1_LUISA/inFile;
		unit<uint32> NUTS2_merged_LUISA := src/NUTS2_merged_LUISA/inFile;
		unit<uint32> NUTS2_LUISA        := src/NUTS2_LUISA/inFile;
		unit<uint32> NUTS3_LUISA        := src/NUTS3_LUISA/inFile;
		
		unit<uint32> LAU2               := aggregations/LAU2/UniqueZones
		{
			attribute<string> ZoneID    := replace(aggregations/LAU2/UniqueZones/ZoneID, '_', '');
			attribute<string> RunAreaId := replace_value(left(ZoneID, 2), 'CH', 'CZ');
		}
		unit<uint32> NUTS3_EuroStat     := src/NUTS3_EuroStat/inFile;
	}

	container LUISA_zones
	{
		unit<uint32> Nuts1 := src/NUTS1_LUISA/inFile
		{
			attribute<CountryTable> CT_id: 		expr = "rlookup(Itl_Code, CountryTable/N0Code)";
			attribute<string> 		Itl_Code:	expr = "substr(ZoneId, 0, 2)";
			attribute<string>		LUISA_Code: expr = "CountryTable/LUISACode[CT_id]";
			attribute<string> 		Label:		expr = "CountryTable/ItlName[CT_id]";
			attribute<string>		LUISAName:	expr = "CountryTable/LUISAName[CT_id]";
			attribute<bool>			Exclude := ZoneId = 'PT2' || ZoneId = 'PT3' || ZoneId = 'FRA' || ZoneId = 'FR9' || RunAreaId == 'UK'; // exclude UK and islands of PT and FR
			attribute<bool>			Sel:		expr = "CountryTable/LUISAsel[CT_id] && !Exclude";
		}
		unit<uint32> RunN1s := subset(Nuts1/Sel)
		{
			attribute<LambertEA> 	Geometry (polygon): expr = "Nuts1/Geometry[Nr_OrgEntity]";
			attribute<string> 		Code:				expr = "Nuts1/LUISA_Code[Nr_OrgEntity]";
			attribute<string> 		Label:				expr = "Nuts1/Label[Nr_OrgEntity]";
			attribute<string> 		Name:				expr = "Nuts1/LUISAName[Nr_OrgEntity]";
			attribute<RunAreas>		RunAreaId:			expr = "rlookup(Name, RunAreas/Values)";
			attribute<string> 		ForestDemandCode:	expr = "Code = 'BL' ? Code : Nuts1/Itl_Code[Nr_OrgEntity]";
			attribute<string> 		ForestDemandName:	expr = "Code = 'BL' ? 'BelgLux' : Label";
			attribute<ForestDemandRegions> ForestDemandId: expr = "rlookup(ForestDemandName, ForestDemandRegions/Values)";
		}
		unit<uint32> outsideRun := subset(!Nuts1/Sel)
		{
			attribute<LambertEA> 	Geometry (polygon) := Nuts1/Geometry[Nr_OrgEntity];
			attribute<string> 		Code := Nuts1/LUISA_Code[Nr_OrgEntity];
			attribute<string> 		Label:= Nuts1/Label[Nr_OrgEntity];
			attribute<string> 		Name := Nuts1/LUISAName[Nr_OrgEntity];
		}
		unit<uint32> RunAreas := Unique(RunN1s/Name)
		{
			attribute<LambertEA> Geometry (poly) := partitioned_union_polygon(RunN1s/Geometry[ipoint], RunN1s/RunAreaId)[LambertEA];
			attribute<string> 	 Name            := Values;
			attribute<string>    Label           := Name, DialogType = "LabelText";
			attribute<string> 	 ICC             := first(RunN1s/Code, RunN1s/RunAreaId);
			attribute<string>	 ZoneId          := ICC;
		}
		unit<uint32> ForestDemandRegions := Unique(RunN1s/ForestDemandName)
		{
			attribute<LambertEA> Geometry (poly) := partitioned_union_polygon(RunN1s/Geometry[ipoint], RunN1s/ForestDemandId)[LambertEA];
			attribute<string> 	 Name     := Values;
			attribute<string> 	 label    := Values;
			
			attribute<string> 	 ICC      := first(RunN1s/ForestDemandCode, RunN1s/ForestDemandId);
			attribute<string>	 ZoneId   := ICC;
			attribute<string>	 RunAreaId:= ICC;
		}
	}
	
	parameter<uint32> NrN0Zones: expr = "56";
	parameter<uint32> NrN0Attributes: expr = "5";
	
	unit<uint32> CountryTable: expr = "range(uint32, 0, NrN0Zones)"
	{
		
		attribute<string> N0Code: 		expr = "inElements/elements[((id(.)*NrN0Attributes)+0)[inElements]]";
		attribute<string> LUISACode:	expr = "inElements/elements[((id(.)*NrN0Attributes)+1)[inElements]]";
		attribute<string> ItlName: 		expr = "inElements/elements[((id(.)*NrN0Attributes)+2)[inElements]]";
		attribute<string> LUISAName:	expr = "inElements/elements[((id(.)*NrN0Attributes)+3)[inElements]]";
		attribute<bool> LUISAsel: 		expr = "bool(uint32(inElements/elements[((id(.)*NrN0Attributes)+4)[inElements]]))";
		
		unit<uint32> inElements: expr = "range(uint32, 0, NrN0Zones * NrN0Attributes)"
		{
		
			attribute<string> elements: [
				'UK',	'UK', 	'United Kingdom',	'United_Kingdom',	'1',
				'NO',	'NO',	'Norway',	'Norway',	'0',
				'GG',	'UK',	'Guernsey',	'',	'0',
				'ES',	'ES',	'Spain',	'Spain',	'1',
				'MT',	'MT',	'Malta',	'Malta',	'1',
				'GE',	'GE',	'Georgia',	'',	'0',
				'TR',	'TR',	'Turkey',	'',	'0',
				'ND',	'UK',	'United Kingdom',	'United_Kingdom',	'1',
				'AT',	'AT',	'Austria',	'Austria',	'1',
				'VA',	'VA',	'Vatican city',	'',	'0',
				'HU',	'HU',	'Hungary',	'Hungary',	'1',
				'RO',	'RO',	'Romania',	'Romania',	'1',
				'SE',	'SE',	'Sweden',	'Sweden',	'1',
				'LU',	'BL',	'Luxembourg',	'BelgLux',	'1',
				'LI',	'LI',	'Liechtenstein',	'',	'0',
				'BY',	'BY',	'Belarus',	'',	'0',
				'MD',	'MD',	'Moldovia',	'',	'0',
				'FO',	'DK',	'Faroe Islands',	'',	'0',
				'DK',	'DK',	'Denmark',	'Denmark',	'1',
				'GI',	'UK',	'Gibraltar',	'',	'0',
				'BE',	'BL',	'Belgium',	'BelgLux',	'1',
				'GR',	'EL',	'Greece',	'Greece',	'1',
				'SK',	'SK',	'Slovakia',	'Slovakia',	'1',
				'RU',	'RU',	'Russia',	'',	'0',
				'CY',	'CY',	'Cyprus',	'Cyprus',	'1',
				'JE',	'UK',	'Jersey',	'',	'0',
				'CZ',	'CZ',	'Czech Republic',	'Czechia',	'1',
				'IM',	'UK',	'Isle of Man',	'',	'0',
				'UA',	'UA',	'Ukraine',	'',	'0',
				'GB',	'UK',	'United Kingdom',	'United_Kingdom',	'1',
				'EE',	'EE',	'Estonia',	'Estonia',	'1',
				'PT',	'PT',	'Portugal',	'Portugal',	'1',
				'AD',	'AD',	'Andorra',	'',	'0',
				'LV',	'LV',	'Latvia',	'Latvia',	'1',
				'SM',	'SM',	'San Marino',	'',	'0',
				'BG',	'BG',	'Bulgaria',	'Bulgaria',	'1',
				'LT',	'LT',	'Lithuania',	'Lithuania',	'1',
				'IE',	'IE',	'Ireland',	'Ireland',	'1',
				'CH',	'CH',	'Swiss',	'',	'0',
				'GL',	'DK',	'Greenland',	'',	'0',
				'FI',	'FI',	'Finland',	'Finland',	'1',
				'PL',	'PL',	'Poland',	'Poland',	'1',
				'IS',	'IS',	'Iceland',	'',	'0',
				'MC',	'MC',	'Monaco',	'',	'0',
				'AL',	'AL',	'Albania',	'',	'0',
				'BA',	'BA',	'Bosnia and Herzegovina',	'Balkans',	'0',
				'ME',	'ME',	'Montenegro',	'Balkans',	'0',
				'NL',	'NL',	'Netherlands',	'Netherlands',	'1',
				'HR',	'HR',	'Croatia',	'Croatia',	'1',
				'FR',	'FR',	'France',	'France',	'1',
				'DE',	'DE',	'Germany',	'Germany',	'1',
				'MK',	'MK',	'Macedonia',	'',	'0',
				'IT',	'IT',	'Italy',	'Italy',	'1',
				'SI',	'SI',	'Slovenia',	'Slovenia',	'1',
				'KS',	'KS',	'Kosovo',	'',	'0',
				'RS',	'RS',	'Serbia',	'Balkans',	'0'];
		}
	}
	
	template doLoadFiles
	{
		parameter<string> path;
		parameter<string> IDfield;
		parameter<string> Labelfield;
		
		unit<uint32> inFile: StorageName = "= '%LuisettaDataDir%/zones/' + path + '.shp'", StorageType = "gdal.vect", StorageReadOnly = "True"
		{
			attribute<LambertEA> Geometry (polygon);
			attribute<Float64>   Area  := Area(Geometry, Float64);
			attribute<string> 	 autoID:= 'z_' + string(id(.));
			attribute<string> 	 ZoneID:=  = strlen(IDfield)    = 0 ? 'autoID' : IDfield;	
			attribute<string> 	 Label :=  = strlen(Labelfield) = 0 ? 'ZoneId' : Labelfield;
			attribute<string>    RunAreaId := replace_value(left(ZoneID, 2), 'BE', 'BELUX', 'LU', 'BELUX');
		}
	}
	template doAggregateSets
	{
		unit<uint32> regions1;
		unit<uint32> regions2;
		
		unit<uint32> mergeUnit := union_unit(regions1, regions2)
		{
			attribute<LambertEA> Geometry (polygon) := union_data(., regions1/Geometry, regions2/Geometry);
			attribute<string> 	 ZoneId             := union_data(., regions1/ZoneId,   regions2/ZoneId);
			attribute<string>  	 Label              := union_data(., regions1/Label,    regions2/Label);
			
			attribute<UniqueZones> uz_rel := rlookup(ZoneId, UniqueZones/Values);
		}		
		
		unit<uint32> UniqueZones := unique(mergeUnit/ZoneID)
		{
			attribute<LambertEA> 	Geometry (polygon) := partitioned_union_polygon(value(mergeUnit/Geometry, ipoint), mergeUnit/uz_rel)[LambertEA];
			attribute<string> 		ZoneID := Values;
			attribute<string> 		Code   := Values;
			attribute<string> 		Label  := AsList(mergeUnit/Label, ',', mergeUnit/uz_rel);
			attribute<float32>		km2 := float32(area(Geometry, float64)) / float32(1000*1000);
		}
	}	
}