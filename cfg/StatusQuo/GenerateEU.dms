container GenerateContainer
{
	unit<UInt8>  LandUseType := Classifications/LU/ViewType;
	unit<UInt16> PeriodsSrc := Parameters/PeriodSet/result;
	unit<UInt16> Periods := select_with_attr_by_cond(Parameters/PeriodSet/result, Parameters/PeriodSet/result/ProjectedYear <= 2021f);
	unit<UInt16> ActiveRun := Parameters/Meta/Run;
	
	// decoupled simulation from mozaiking
	container CalcRunRegions
	{
		container impl 
		{
			// calcorder per run-region: first all years for AT1, then AT2 etc.
			template GeneratePeriodTemplate
			{
				container TimeStep;
				
				container result: ExplicitSuppliers = "TimeStep/ResultingState/OutputGeneration/ClippedLandUseVT;TimeStep/ResultingState/CumulStatusFlag;TimeStep/ResultingState/GeneratedFiles"
				{
					parameter<bool> StatusFlag := TimeStep/ResultingState/CumulStatusFlag;
					parameter<string> StatusText := TimeStep/d_alloc/Status;
				}
			}
			
			template GenerateRunRegionTemplate
			{
				container RunRegion;
				container CalculatedPeriods_impl := for_each_ne(Periods/Name, 'GeneratePeriodTemplate(RunRegion/TimeSteps/'+Periods/Name+')');
				container CalculatedPeriods := FenceContainer(CalculatedPeriods_impl, 'RunRegion: '+RunRegion/RunParameters/name);
				
				container result
				{
					attribute<bool> StatusFlags(Periods) := ='union_data(Periods, '+AsList('CalculatedPeriods/'+Periods/Name+'/result/StatusFlag', ',')+')'
					,	ExplicitSuppliers = "=AsList('CalculatedPeriods/'+Periods/Name+'/result/StatusFlag', ';')" //+';RunRegion/simulation_results/GeneratedFiles'"
					;
					attribute<string> StatusTexts(Periods) := ='union_data(Periods, '+AsList('CalculatedPeriods/'+Periods/Name+'/result/StatusText', ',')+')'
					,	ExplicitSuppliers = "=AsList('CalculatedPeriods/'+Periods/Name+'/result', ';')" //+';RunRegion/simulation_results/GeneratedFiles'"
					;
				}
			}
			container All: Expr = 
				"for_each_ne(ActiveRun/Name, "
					"'GenerateRunRegionTemplate('+"
						"'Runs/'+ActiveRun/Name+"
					"+')'"
				")";
		}
		
		container ButtonCan: Descr = "The Generate parameter is contained in order to allow impl/All to be opened without all the meta info procesing that comes with getting Generate in the TreeView"
			,	StoreData = "True"
			,	FreeData  = "False"
		{
			container StatusFlags:= for_each_nedv(ActiveRun/Name, 'impl/All/'+ActiveRun/Name+'/result/StatusFlags', Periods, bool);
			container StatusTexts := for_each_nedv(ActiveRun/Name, 'impl/All/'+ActiveRun/Name+'/result/StatusTexts', Periods, string);
			container RunRegionResults {
				attribute<string>  Country                (ActiveRun) := ActiveRun/name;
				attribute<bool>    AllOK                  (ActiveRun) := ='union_data(ActiveRun, '+AsItemList('all(StatusFlags/'+ActiveRun/Name+')')+')';
				attribute<Periods> FirstFailureOrLastAlloc(ActiveRun) := ='union_data(ActiveRun, '+AsItemList('min_index(StatusFlags/'+ActiveRun/Name+' ? 9999w - ID(Periods) : ID(Periods))')+')';
				attribute<string>  FailYear               (ActiveRun) := AllOK ? '' : string(FirstFailureOrLastAlloc->ProjectedYear);
				attribute<string>  StatusText             (ActiveRun) := ='replace(union_data(ActiveRun, '+AsItemList('StatusTexts/'+ActiveRun/Name+'[FirstFailureOrLastAlloc['+string(id(ActiveRun))+'[ActiveRun]]]')+'), '';'',''$'')';
			}
			parameter<bool> StatusOK := ='and('+AsItemList('all(StatusFlags/'+ActiveRun/Name+')')+')';
			parameter<String> results :=	'calculated ' +string(StatusOK)
//				,	ExplicitSuppliers = "GenerateAllLandSupplyCurves/Generate2020;GenerateAllLandPairSupplyCurves/Generate2020"
//				,	IntegrityCheck   = "StatusOK"
				;
		}
	}
	container MozaikLandUse
	{
		container impl 
		{
			parameter<string> CombineExpr := 
				'raster_merge(ActiveRun/Grid, LandUseType, '+
					AsItemList('Runs/'+ActiveRun/Name +'/simulation_results/LandUse/ClippedGridPerYearVT_ReadOnly/@YR')+
				')';
			attribute<String> CombineExprPerPeriod(Periods) := replace(CombineExpr, '@YR', Periods/Name);
				
			container LandusePerYear := for_each_nedv(Periods/Name, 'MakeDefined('+CombineExprPerPeriod+', 0[LandUseType])', Geography/Lambert100mGrid, LandUseType);
			
			// Mozaiking the generated RunRegion maps per Period
			parameter<String> DirName := Parameters/ParamSets/ActiveSet/OutputFolderName + '/EU';
			template GeneratePeriodTemplate
			{
				attribute<LandUseType> LandUse(Geography/Lambert100mGrid);				
				parameter<String> PeriodYearStr;				
				
				attribute<LandUseType> result(Geography/Lambert100mGrid): Expr = "Landuse", StorageName = "=DirName+'/LandUseVT_'+PeriodYearStr+'.tif'"
				{
					attribute<UInt32> PaletteData(LandUseType): Expr = "LandUseType/Color";
				}
			}
		
			container AllPeriods: Expr = 
				"for_each_ne(Periods/Name, "
					"'GeneratePeriodTemplate('"
						"+'LandusePerYear/'+Periods/Name+','"
						"+Quote(Periods/YearStr)"
					"+')'"
				")";
		}

		container ButtonCan: Descr = "The Generate parameter is contained in order to allow impl/All to be opened without all the meta info procesing that comes with getting Generate in the TreeView"
		{
			parameter<string> Generate: Expr = "'ready'", ExplicitSuppliers = "=AsList('impl/AllPeriods/'+Periods/Name+'/result',';')";
		}
		container Results {
			container Landuse := for_each_ndva(Periods/Name
				, Geography/Lambert100mGrid, LandUseType
				, impl/DirName+'/LandUseVT_' + Periods/YearStr + '.tif'
			);
		}
		container GenerateSummary {
			unit<uint32> CountryLUT := combine(ActiveRun, LandUseType) {
				attribute<ActiveRun>   ActiveRun_rel   := nr_1;
				attribute<LandUseType> LandUseType_rel := nr_2;
			}
			container PerCountryPerYear := for_each_nedv(Periods/Name
				, replace('count(Results/Landuse/@YR, combine_data(CountryLUT, ActiveRun/Grid, Results/Landuse/@YR))', '@YR', Periods/Name)
				, CountryLUT, UInt32
			);
			unit<uint32> YearCountryLUT := combine(Periods, CountryLUT) {
				attribute<Periods    > Periods_rel     := nr_1;
				attribute<ActiveRun  > ActiveRun_rel   := CountryLUT/ActiveRun_rel[nr_2];
				attribute<LandUseType> LandUseType_rel := CountryLUT/LandUseType_rel[nr_2];
			}
			unit<uint32> ExportTable := YearCountryLUT, StorageName = "=impl/DirName+'/CountryLanduseTable.dbf'"
			{
				attribute</Parameters/YearRange> Year    := Periods/CurrYear  [Periods_rel];
				attribute<string>    Country := ActiveRun/Name[ActiveRun_rel];
				attribute<string>    LandUse := LandUseType/Name[LandUseType_rel];
				attribute<UInt32>    HA      := ='union_data(., '+AsItemList('PerCountryPerYear/'+Periods/Name)+')';
			}
		}
	}		
	container MozaikPopulation
	{
		container impl 
		{
			parameter<string> CombineExpr := 'raster_merge(Geography/Regions/Runs/Grid, int32, '+AsItemList('Runs/'+ActiveRun/Name +'/XXX')+')';		
			attribute<String> CombineExprPerPeriod(Periods) := replace(CombineExpr, 'XXX', 'simulation_results/landuse/ClippedQiPerYearVT_ReadOnly/'+Periods/Name);
				
			container PopulationPerYear := for_each_nedv(Periods/Name, 'MakeDefined('+CombineExprPerPeriod+', 0[int32])', Geography/Lambert100mGrid, int32);
			
			// Mozaiking the generated RunRegion maps per Period
			parameter<String> DirName := '%LocalDataProjDir%/Results/EU';
			template GeneratePeriodTemplate
			{
				attribute<int32> Qi(Geography/Lambert100mGrid);
				parameter<String> PeriodYearStr;
				
				attribute<int32> result (Geography/Lambert100mGrid) := max_elem(Qi, int32(0)), StorageName = "=DirName+'/Qi_'+PeriodYearStr+'.tif'";
				
				attribute<int32> Qi_per_N2merged 	(Geography/Regions/Nuts2_Merged) := sum(result, Geography/RegionGrids/Nuts2_Merged);
				attribute<float32> dif_Qi			(Geography/Regions/Nuts2_Merged) := float32(Qi_per_N2merged) - Parameters/PopSets/RegionalPopulation/Demands/Qj/s2050;
				
			}
		
			container AllPeriods := for_each_ne(Periods/Name, 'GeneratePeriodTemplate('+'PopulationPerYear/'+Periods/Name+','+Quote(Periods/YearStr)+')' );
		}

		container ButtonCan: Descr = "The Generate parameter is contained in order to allow impl/All to be opened without all the meta info procesing that comes with getting Generate in the TreeView"
		{
			parameter<string> Generate := 'ready', ExplicitSuppliers = "=AsList('impl/AllPeriods/'+Periods/Name+'/result',';')";
		}
		container Results {
			container Population := for_each_ndva(Periods/Name
				, Geography/Lambert100mGrid, int32
				, impl/DirName+'/Qi_' + Periods/YearStr + '.tif'
			);
		}
	}		
	container HardValidation {
		unit<uint8> MT := Classifications/LU/ModelType;
		
		unit<uint32> lut: 
			StorageName = "%LuisettaDataDir%/TestSet/landuse_transition_codes_table.csv", 
			StorageType = "gdal.vect", 
			StorageReadOnly = "True"
		{
		}
			
		unit<uint32> TestSet: 
			StorageName = "%LuisettaDataDir%/TestSet/test_set_full_change_no_change.shp", 
			StorageType = "gdal.vect", 
			StorageReadOnly = "True"
		{
			attribute<lut> lut_rel     := rlookup(class, int32(lut/lut));
			attribute<MT>  MT_from_rel := convert(uint8(lut_rel->from) - 1b, MT);
			attribute<MT>  MT_to_rel   := convert(uint8(lut_rel->to  ) - 1b, MT);
			attribute<MT2> MT2_from_to_rel     := combine_data(MT2, MT_from_rel, MT_to_rel);
			
			attribute<bool> isSame := MT_from_rel == MT_to_rel;
			
			attribute<Geography/Lambert100mGrid> grid_rel := geometry[Geography/Lambert100mGrid];
			
			attribute<LandUseType>  ModelledVT  := MozaikLandUse/Results/LandUse/P2020[grid_rel];
			attribute<MT>  ModelledMT           := ModelledVT->MT;
			
			attribute<MT2> MT2_modelled_to_rel     := combine_data(MT2, ModelledMT, MT_to_rel);
		}
		unit<uint32> MT2 := combine(MT, MT)
		{
			attribute<uint32> count_from_to := pcount(TestSet/MT2_from_to_rel);
			container xTab_from_to := for_each_nedv(MT/name, 'count_from_to[combine_data(MT2, ID(MT),MT/V/'+MT/name+')]', MT, uint32);
			
			attribute<uint32> count_modelled_to := pcount(TestSet/MT2_modelled_to_rel);
			container xTab_modelled_to := for_each_nedv(MT/name, 'count_modelled_to[combine_data(MT2, ID(MT),MT/V/'+MT/name+')]', MT, uint32);
		}
		container Table
		{
			attribute<string>  Label(MT) := MT/name;
			attribute<uint32>  PredictionCount(MT) := sum(MT2/count_modelled_to, MT2/first_rel);
			attribute<uint32>  CorrectCount   (MT) := MT2/count_modelled_to[combine_data(MT2, ID(MT), ID(MT))];
			attribute<uint32>  FalsePredicted (MT) := PredictionCount - CorrectCount;
			
			attribute<Float64> PredictionScore(MT) := float64(CorrectCount) / float64(PredictionCount);
		}
	}
}
