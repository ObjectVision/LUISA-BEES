container GenerateContainer
{
	unit<UInt8>  LandUseType: Expr = "Classifications/LU/ViewType";
	unit<UInt16> Periods: Expr= "Parameters/PeriodSet/result";
	unit<UInt16> Run: Expr= "Parameters/Meta/Run";
	
	unit<UInt32> ExceptionList: NrOfRows = 5 // @USERINPUT, must be equal to the number of codes.
	{
		attribute<String> code: [        // @USERINPUT, give a list of RunRegion codes that should be excluded from Calculation and/or Mozaiking.
			"DISABLED DEA",  // issue 109
			"DISABLED FR6",  // issue 110
			"DISABLED ITC",  // issue 111
			"DISABLED PT1",  // issue 108
			"DISABLED DE2"   // new issue in GeoDms 6.027: cumulStatusFlag of 2011 is false
		];
	}
	
	unit<uint16> ActiveRun: Expr = "Subset(not(IsDefined(rlookup(Run/Name, ExceptionList/code))) )"
//	unit<uint16> ActiveRun: Expr = "Subset(not(IsDefined(rlookup(Run/Name, ExceptionList/code))) && (ID(Run) >= 52[run])&& (ID(Run) <= 57[run]))"
	{
		attribute<String> Name: Expr = "Run/Name[nr_OrgEntity]";
	}
	
	// decoupled simulation from mozaiking
	container CalcRunRegions
	{
		container impl 
		{
			// calcorder per run-region: first all years for AT1, then AT2 etc.
			
			container GeneratePeriodTemplate:IsTemplate = "True", isHidden = "True"
			{
				container TimeStep;
				
				container result: ExplicitSuppliers = "TimeStep/ResultingState/OutputGeneration/ClippedLandUseVT;TimeStep/ResultingState/CumulStatusFlag"
				{
					parameter<bool> StatusFlag: Expr = "TimeStep/ResultingState/CumulStatusFlag";
				}
			}
			
			container GenerateRunRegionTemplate:IsTemplate = "True", isHidden = "True"
			{
				container RunRegion;
				container CalculatedPeriods: Expr = 
					"for_each_ne(Periods/Name, "
						"'GeneratePeriodTemplate('"
							"+'RunRegion/TimeSteps/'+Periods/Name"
						"+')'"
					")";
				container result : ExplicitSuppliers = "=AsList('CalculatedPeriods/'+Periods/Name+'/result', ';')"
				{
					attribute<bool> StatusFlags(Periods) : Expr = "='union_data(Periods, '+AsList('CalculatedPeriods/'+Periods/Name+'/result/StatusFlag', ',')+')'";
				}
			}
			container All: Expr = 
				"for_each_ne(ActiveRun/Name, "
					"'GenerateRunRegionTemplate('+"
						"'Runs/'+ActiveRun/Name+"
					"+')'"
				")";
		}
		
		container ButtonCan: Descr = "The Generate parameter is contained in order to allow impl/All to be opened without all the meta info procesing that comes with getting Generate in the TreeView"
		{
			parameter<String> GenerateDataPreparation: Expr = "DataPreparation/CAP/LOCSPECS/Generate";
			container StatusFlags
				:	Expr = "for_each_nedv(ActiveRun/Name, 'impl/All/'+ActiveRun/Name+'/result/StatusFlags', Periods, bool)"
				,	StoreData = "True"
				,	FreeData  = "False";
			parameter<String> results
				:	Expr = "'calculated'"
				,	ExplicitSuppliers = "=AsList('impl/All/'+ActiveRun/Name+'/result',';')"
				,	IntegrityCheck   = "='and('+AsItemList('all(StatusFlags/'+ActiveRun/Name+')')+')'";
		}
	}
	container MozaikLandUse
	{
		container impl 
		{
			parameter<string> CombineExpr: IsHidden = "True", Expr = 
				"'raster_merge(invert(ActiveRun/nr_OrgEntity)[Geography/Regions/Runs/Grid], LandUseType, '+"
					"AsItemList("
						"'Runs/'+ActiveRun/Name +'/XXX'"
					")+"
				"')'";		
			attribute<String> CombineExprPerPeriod(Periods): Expr = 
				"replace(CombineExpr, 'XXX', 'simulation_results/LandUse/ClippedGridPerYearVT_ReadOnly/'+Periods/Name)",  isHidden = "True";
				
			container LandusePerYear: Expr = "for_each_nedv(Periods/Name, 'MakeDefined('+CombineExprPerPeriod+', 0[LandUseType])', Geography/Lambert100mGrid, LandUseType)";
			
			// Mozaiking the generated RunRegion maps per Period
			parameter<String> DirName: Expr = "'%LocalDataProjDir%/Results/EU'";
			container GeneratePeriodTemplate:IsTemplate = "True", isHidden = "True"
			{
				attribute<LandUseType> LandUse(Geography/Lambert100mGrid);				
				parameter<String> PeriodYearStr;				
				
				attribute<LandUseType> result(Geography/Lambert100mGrid): Expr = "Landuse", StorageName = "=DirName+'/LandUseVT_'+PeriodYearStr+'.tif'"
				{
					attribute<UInt32> PaletteData(LandUseType): Expr = "LandUseType/Color";
				}
			}
		
			container AllPeriods: Expr = 
				"for_each_ne(Periods/Name, "
					"'GeneratePeriodTemplate('"
						"+'LandusePerYear/'+Periods/Name+','"
						"+Quote(Periods/YearStr)"
					"+')'"
				")";
		}

		container ButtonCan: Descr = "The Generate parameter is contained in order to allow impl/All to be opened without all the meta info procesing that comes with getting Generate in the TreeView"
		{
			parameter<string> Generate: Expr = "'ready'", ExplicitSuppliers = "=AsList('impl/AllPeriods/'+Periods/Name+'/result',';')";
		}
	}		
	container MozaikPopulation
	{
		container impl 
		{
			parameter<string> CombineExpr: IsHidden = "True", Expr = 
				"'raster_merge(invert(ActiveRun/nr_OrgEntity)[Geography/Regions/Runs/Grid], int32, '+"
					"AsItemList("
						"'Runs/'+ActiveRun/Name +'/XXX'"
					")+"
				"')'";		
			attribute<String> CombineExprPerPeriod(Periods): Expr = 
				"replace(CombineExpr, 'XXX', 'simulation_results/landuse/ClippedQiPerYearVT_ReadOnly/'+Periods/Name)",  isHidden = "True";
				
			container PopulationPerYear: Expr = "for_each_nedv(Periods/Name, 'MakeDefined('+CombineExprPerPeriod+', 0[int32])', Geography/Lambert100mGrid, int32)";
			
			// Mozaiking the generated RunRegion maps per Period
			parameter<String> DirName: Expr = "'%LocalDataProjDir%/Results/EU'";
			container GeneratePeriodTemplate:IsTemplate = "True", isHidden = "True"
			{
				attribute<int32> Qi(Geography/Lambert100mGrid);
				parameter<String> PeriodYearStr;
				
				attribute<int32> result (Geography/Lambert100mGrid): Expr = "max_elem(Qi, int32(0))", StorageName = "=DirName+'/Qi_'+PeriodYearStr+'.tif'";
				
				attribute<int32> Qi_per_N2merged 	(Geography/Regions/Nuts2_Merged): expr = "sum(result, Geography/RegionGrids/Nuts2_Merged)";
				attribute<float32> dif_Qi			(Geography/Regions/Nuts2_Merged): expr = "float32(Qi_per_N2merged) - Parameters/PopSets/RegionalPopulation/Demands/Qj/s2050";
				
			}
		
			container AllPeriods: Expr = 
				"for_each_ne(Periods/Name, "
					"'GeneratePeriodTemplate('"
						"+'PopulationPerYear/'+Periods/Name+','"
						"+Quote(Periods/YearStr)"
					"+')'"
				")";
		}

		container ButtonCan: Descr = "The Generate parameter is contained in order to allow impl/All to be opened without all the meta info procesing that comes with getting Generate in the TreeView"
		{
			parameter<string> Generate: Expr = "'ready'", ExplicitSuppliers = "=AsList('impl/AllPeriods/'+Periods/Name+'/result',';')";
		}
	}		
}
