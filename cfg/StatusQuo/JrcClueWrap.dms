template JrcClueWrap:
	Descr =
		"This CalculationSchema allocates according to the description in the article:\n"
		"Hilferink, M.Th.A. & P. Rietveld, The Land Use Scanner;\n"
		"An integrated model for long term projections of land use in urban and rural areas,\n"
		"Journal of Geographic Systems, p. 155-177, 1999.\n"
		"The symbols used in the description are explained in this article and\n"
		"the description of the calculation rules refers to the formula numbers there.",
	ViewAction = "Map View.Thematic:results/landuse/Dominant_gg9"
{
	container RunParameters;
	unit<wpoint> domain_grid;
	
	// ===================== End of Required Case Parameters
	
	unit<uint32> domain := CaseData/Land/FreeLandCells;
	
	container ParamSet: Expr = "RunParameters/ParamSet";
	
 	container SuitabilityGenerator: Expr = "='ModelTraits/'+RunParameters/SuitabilityTraits";
 	
	unit<uint16> Periods:    Expr = "Parameters/PeriodSet/result";
	
	//container Neighbourhood: Expr = "Rules/Neighbourhood";
	container DemandSet:     Expr = "RunParameters/DemandSet";
	
	// ===================== End of optional Case Parameters

	// ===================== start of domain relations

	attribute<Geography/Lambert100mGrid> Lambert100m_rel (domain_grid): Expr = "id(domain_grid)[Geography/Lambert100mGrid]";
	
	unit<uint8> ModelType: Expr = "Classifications/LU/ModelType";
	
	unit<UInt32> 	Factors: 	Expr = "MetaData/Factors";
	unit<uint8> 	DC:				Expr = "MetaData/DemandCharacteristics";  // demand characteristics
	container Rules: Expr = "RunParameters/AllocSet/Rules";	
	
	parameter<Geography/Regions/Runs> JrcRegionId: expr = "rlookup(RunParameters/Name, Geography/Regions/Runs/Name)";
		
	#include<inRunRegions.dms>
	
	container CaseData
	{	
		container JrcFactorData := JrcFactorDataTempl(domain_grid);
		container PrepareVariables := for_each_nedv(Factors/Name, Factors/StartExpr, domain, float32)
		{
			attribute<Classifications/LU/ModelType> landuse2012 (domain) := JrcFactorData/PrepareData/LandUse2012Grid[domain/grid_rel];
			attribute<Classifications/LU/ModelType> landuse2018 (domain) := JrcFactorData/PrepareData/LandUse2018Grid[domain/grid_rel];
			attribute<Classifications/LU/ModelType> landuse     (domain) := JrcFactorData/PrepareData/LandUseGrid    [domain/grid_rel];
			
			attribute<Classifications/LU/Capri> CorCapri_2012(domain) := Classifications/LU/Capri/per_ModelType[landuse2012];
			attribute<Classifications/LU/Capri> CorCapri_2018(domain) := Classifications/LU/Capri/per_ModelType[landuse2018];
		}
		
		// ============ allocatable land
		container Land: Descr = "These attributes are used to describe the freeLand for allocation"
		{
			attribute<Bool> IsInRunRegion(domain_grid): Expr = 
				//"Geography/Regions/Runs/RegionGridSet!RunParameters/Name"; 
				"!IsNull(RunRegions/RasterSets/RunAreas)";
				
			attribute<bool> IsInDestClaimRegions(domain_grid): Expr = "= 'and('+ AsItemList('!IsNull(RunRegions/RasterSets/'+UniqueDestRegionRefs/Values+')') +')'";
			
			attribute<bool> Allocatable  (domain_grid) := IsInRunRegion && IsDefined(JrcFactorData/PrepareData/LandUseGrid) && IsInDestClaimRegions;
			
			unit<UInt32> FreeLandCells: Expr = "subset(Allocatable)", DialogType = "Map", DialogData = "BasisGrid"
			{
				attribute<FreeLandCells> permutation: Expr = "rnd_permutation(0, FreeLandCells)";
				attribute<domain_grid>   grid_rel (FreeLandCells): Expr = "lookup(permutation, nr_OrgEntity)";
				attribute<FreeLandCells> BasisGrid  (domain_grid): Expr = "invert(grid_rel)";
				parameter<uint32> 		 p99_value:				Expr = "uint32(float32(#.) * float32(0.99))";
			}
		}
		
		// ============ Regions meta
		attribute<String> RegionRefs	(ModelType): Expr = "DemandSet/RegionRefs[ModelType/DemandCharacteristicsRel]";
		attribute<String> DestRegionRefs(ModelType): Expr = "DemandSet/DestRegionRefs[ModelType/DemandCharacteristicsRel]";
		unit<UInt8> UniqueRegionRefs:     Expr = "DemandSet/RunRegion_Specific_RegionRefs";
		unit<Uint8> UniqueDestRegionRefs: Expr = "DemandSet/UniqueDestRegionRefs";
		unit<Uint8> AllRegionRefs:        Expr = "DemandSet/AllRegionRefs";
	
		unit<uint16> DestPopClaimRegion: 	Expr = "= 'RunRegions/UnitSets/'+ DestRegionRefs[ModelType/V/Urban]";
		unit<uint16> OrgPopClaimRegion: 	Expr = "= 'RunRegions/UnitSets/'+ RegionRefs[ModelType/V/Urban]";
		attribute<OrgPopClaimRegion>  OrgPopRasterLink	(domain_grid):		Expr = "= 'RunRegions/RasterSets/'+ RegionRefs[ModelType/V/Urban]";
		attribute<DestPopClaimRegion> DestPopRasterLink (domain_grid):		Expr = "= 'RunRegions/RasterSets/'+ DestRegionRefs[ModelType/V/Urban]";
		
		container DemandZoneConversions: using = "MetaData/DemandCharacteristics"
		{
			container inClaimTables: Expr = "DemandSet/ClaimTables";
			
			attribute<bool> OrgRegionIsDestinationRegion (ModelType): expr = "IsNull(RegionRefs) || RegionRefs = DestRegionRefs";
			
			container Conversions: expr = "for_each_ne(Name, OrgRegion = ModelRegion ? "
				"'SameZones(' + quote(OrgRegion) + ')' : "
				"'reaggregateWeights('+ quote(OrgRegion) +', '+ quote(ModelRegion) + ')')", FreeData = "False";
			
			container SameZones: IsTemplate = "True", Using = "RunRegions/UnitSets;"
			{
				parameter<string> OrgClaimZoneSetName;
				
				unit<uint16> crossTab: expr = "= 'RunRegions/UnitSets/' + OrgClaimZoneSetName"
				{
					attribute<crossTab> nr_1: 			expr = "id(.)";
					attribute<crossTab> nr_2: 			expr = "id(.)";
					attribute<float32> orgzone_weight: 	expr = "const(float32(1), ., float32)";
				}
			}
			
			container ReaggregateWeights: IsTemplate = "True", Using = "RunRegions/UnitSets;"
			{
				parameter<string> OrgClaimZoneSetName;
				parameter<string> DestClaimZoneSetName;
				parameter<string> agg_weight_def: 				expr = "'const(float32(1), domain, float32)'"; // expr = "'base_zones/area'";
				
				unit<uint16> OrgClaimZone: 					expr = "= 'RunRegions/UnitSets/' + OrgClaimZoneSetName";
				unit<uint16> DestClaimZone: 				expr = "= 'RunRegions/UnitSets/' + DestClaimZoneSetName";
				unit<uint32> crossTab: expr = "combine(OrgClaimZone, DestClaimZone)" 
				{
					attribute<wpoint> 	ct_id: 			expr = "point(nr_1, nr_2, wpoint)"; 
					attribute<float32>	orgzone_weight:	expr = "sum(weight, ct_ids) / sum(weight, nr_1[ct_ids])[nr_1]";
				}
				attribute<float32> 		weight		 (domain): expr = "= agg_weight_def";
				attribute<wpoint> 		ct_id_points (domain): expr = "= 'point(RunRegions/RasterSets/'+ OrgClaimZoneSetName +'[domain/grid_rel], RunRegions/RasterSets/'+ DestClaimZoneSetName +'[domain/grid_rel], wpoint)'";
				attribute<crossTab>		ct_ids		 (domain): expr = "rlookup(ct_id_points, crossTab/ct_id)";
				
				// 32 version would use upoint not wpoint!
			}
			
		}
		
		// ============ Regions

		// ============ claims
		container ClaimTables := DemandSet/ClaimTables;
		attribute<String> ClaimTableName		(ModelType): Expr = "MakeDefined(DC/OrgRegion[ModelType/DemandCharacteristicsRel], 'ForestDemandRegions')";
		attribute<String> DestClaimTableName	(ModelType): Expr = "MakeDefined(DC/ModelRegion[ModelType/DemandCharacteristicsRel], ClaimTableName)";
		
		container RegionGrids: Expr = "for_each_nedvn(AllRegionRefs/Values, 'RunRegions/RasterSets/'+AllRegionRefs/Values+'[domain/grid_rel]', domain, RunRegions/UnitSets, AllRegionRefs/Values)";

		container RegionNumbersSpecTempl: Istemplate = "True"
		{
			unit<uint16> RegionsOrg;
			parameter<string> RegionsSetName;
		
			attribute<RegionsOrg> RegionMapOrg (domain): expr = "= 'RegionGrids/'+RegionsSetName";
			
			unit<UInt16> LocalRegions16: Expr = "RegionsOrg", DialogType = "Map", DialogData = "LocalRegionGrid"
			{
				attribute<.> LocalRegionGrid (domain_grid): expr = "RegionMapOrg[domain/BasisGrid]";
				attribute<string> Label: expr = "RegionsOrg/Label";
				attribute<RegionsOrg> Values: expr = "id(.)";
			}
			unit<UInt32> LocalRegions32: Expr = "Range(LocalRegions16, UInt32(0), UInt32(#LocalRegions16))", DialogType = "Map", DialogData = "LocalRegionGrid"
			{
				attribute<.> LocalRegionGrid (domain_grid): Expr = "LocalRegions16/LocalRegionGrid[.]";
				attribute<String>     Label:  Expr = "LocalRegions16/Label [value(ID(.),LocalRegions16)]", DialogType = "LabelText";
				attribute<RegionsOrg> Values: Expr = "rlookup(id(.), UInt32(id(RegionsOrg)))";
			}
		}		
		unit<UInt16> RegionNumbersTempl: IsTemplate = "True";
		
		container RegionNumbersSpec: 	Expr = "for_each_ne(AllRegionRefs/Values, 'RegionNumbersSpecTempl(RunRegions/UnitSets/'+AllRegionRefs/Values+', '+quote(AllRegionRefs/Values)+')')";
		container RegionNumbers: 		Expr = "for_each_net(AllRegionRefs/Values, 'RegionNumbersSpec/'+AllRegionRefs/Values+'/LocalRegions16', RegionNumbersTempl)";
		container RegionSizes:			Expr = "for_each_nednv(AllRegionRefs/Values, 'pcount(RegionGrids/'+AllRegionRefs/Values+')', RunRegions/UnitSets, AllRegionRefs/Values, uint32)";
		
		// ============ Renumbered Regions
		container RegionData: Expr = "for_each_nedvn(AllRegionRefs/Values, 'invert(RegionNumbers/'+AllRegionRefs/Values+'/Values)[RegionGrids/'+AllRegionRefs/Values+']', domain, RegionNumbers, AllRegionRefs/Values)";
		container OrgLandUseCount: Expr = "reg_count(StartingState/LandUse[domain/BasisGrid], ModelType/Name, RunRegions/RasterSets, DestClaimTableName)"; 
		
		container ClaimTableSelections: Expr = "for_each_ne(UniqueRegionRefs/Values, 'ClaimTableSelectionTemplate(ClaimTables/'+UniqueRegionRefs/Values+', Parameters/PeriodSet/StartYear)')";
		
		container adapt_claim_org: expr = "for_each_nednv(ModelType/Name, "
					"'MakeDefined('+"
							"'rjoin('+"
								"'RunRegions/UnitSets/'+ClaimTableName+'/ZoneId, '+"
								"'CaseData/ClaimTables/'+ClaimTableName+'/Data/RegionUp[ClaimTableSelections/'+ClaimTableName+'/sel/nr_OrgEntity], '+"
								"'float32(CaseData/ClaimTables/'+ClaimTableName+'/Data/'+MakeDefined(ModelType/MinClaimColumn, 'ZeroClaim')+'[ClaimTableSelections/'+ClaimTableName+'/sel/nr_OrgEntity])'+"
							"')'+"
						"', float32(0))'"
						", RegionNumbers,
						ClaimTableName, float32)", FreeData = "False";
		container adapt_claim := adapt_claim_org {
			unit<uint16> Capri := RegionNumbers/Capri;
			attribute<float32> Arable  (Capri) := float32(OrgLandUseCount/Arable); 
			attribute<float32> Pastures(Capri) := float32(OrgLandUseCount/Pastures); 
			attribute<float32> PermanentCrops(Capri) := float32(OrgLandUseCount/PermanentCrops); 
		}
		unit<uint16> AtomicRegions := overlay(UniqueDestRegionRefs/Values, domain, RegionData)
		,	DialogType = "map", DialogData = "per_domain_grid"
		{
			attribute<AtomicRegions> UnionData(domain);
			attribute<AtomicRegions> per_domain_grid(domain_grid) := UnionData[domain/BasisGrid];
			
			attribute<uint32> 		 Recs := Pcount(UnionData);
			attribute<AtomicRegions> ID := ID(AtomicRegions);
			attribute<bool>			 error(domain) := IsNull(UnionData);
		}
		
		// redundant with modeltraits. May need to be shifted to global templateset.
		container ClaimTableSelectionTemplate : IsTemplate = "True"
		{
			container ClaimTable;
			parameter<YearRange> FutureYear;
			unit<uint32> sel: expr = "Subset(Float32(ClaimTable/Data/Year) == FutureYear)"
			{
				attribute<String> Label: Expr = "ClaimTable/Domain/Label[nr_OrgEntity]", DialogType = "LabelText";
				
			}
		}

		// ============ locspecs
		container LocSpec:
			Expr = 
				"for_each_nedv(ModelType/Name, "
					"'float32(1) + MakeDefined(Float32(JrcFactorData/'+ParamSet/LocSpecContainerName+'/' + ModelType/Name + '[domain/grid_rel] ) / Float32(100), float32(0))',"
					"domain, Float32"
				")";
		// ============ Fixed Parameters
		parameter<Float32> SuitScaleFactor := value(10000, Meter2 / luHa);
		unit<int32> EUR_Ha_int32: Expr = "int32(EUR_HA)";
		
		#include<getOptimalk_NUTS2.dms>
		container CAP := CAPTemplate/getCAPLocSpecs(RunRegions/UnitSets/RunAreas, CaseData/JrcFactorData/PrepareData/LoadSpatialData, PrepareVariables);
		#include<CAP.dms>
			
	}
	container StartingState
	{
		attribute<ModelType> LandUse_Grid(domain_grid) := CaseData/JrcFactorData/PrepareData/LandUseGrid;
		attribute<ModelType> LandUse     (domain)      := !BurntForest ? LandUse_Grid[domain/grid_rel] : ModelType/V/TransWoodlandShrub;
		attribute<bool>		 BurntForest (domain)      := 
			(LandUse_Grid[domain/grid_rel] == ModelType/V/ForestsMature || LandUse_Grid[domain/grid_rel] = ModelType/V/ForestsYoung) 
			&& float32(CaseData/JrcFactorData/BurntAreas/BurntInYear[domain/grid_rel]) < Parameters/PeriodSet/StartYear;
		attribute<bool>		 CorineBurnt (domain)      := Classifications/LU/Corine/Burnt[CaseData/JrcFactorData/PrepareData/CorineGrid[domain/grid_rel]];
		parameter<float32>   ComingPeriodLength        := Periods/PeriodLength[0w];
		parameter<YearRange> CurrYear                  := Periods/CurrYear[0w];
		parameter<YearDiffRange> RefTime := CurrYear;
		parameter<bool> cumulStatusFlag: Expr = "true";
		attribute<YearDiffRange> Age    (domain): Expr = "switch("
			"case(CorineBurnt, value(3, YearDiffRange)), "
			"case(BurntForest, Parameters/PeriodSet/StartYear - float32(CaseData/JrcFactorData/BurntAreas/BurntInYear[domain/grid_rel]) - float32(1)), "
//			"value(CaseData/PrepareVariables/Variables/age0, YearDiffRange))";
			"value(0, YearDiffRange))";
			
		attribute<float32> Qi(domain): Expr = "float32(CaseData/getOptimalk/PopulationDistribution/Qi)";
	    attribute<float32> PopDensity_km2 (domain): Expr = "MakeDefined(potential(Qi[domain/BasisGrid], Parameters/FuncKernels/Area1km2/AbsWeight)[domain/grid_rel] , 0[float32])";
		attribute<float32> Si (domain): 	Expr = "Qi";
		attribute<Year>	   	S_Agei (domain): Expr = "Qi > 0[float32] ? rnd_uniform(0, domain, range(Year, 0[Year], 10[Year])): 100[Year]"; // 0 years if supply has changed in a year
		attribute<float32> Qj	(CaseData/DestPopClaimRegion): Expr = "sum(Qi[domain/basisgrid], CaseData/DestPopRasterLink)";
		attribute<float32>	   NeighboursWeight (domain): Expr = "potential(const(float32(1), domain, float32)[domain/basisgrid], Parameters/FuncKernels/QueensNeighbours/Matr)[domain/grid_rel]";
		attribute<float32> PotQi 	(domain): Expr = "MakeDefined(potential(float32(CaseData/getOptimalk/PopulationDistribution/Qi)[domain/BasisGrid], Parameters/FuncKernels/RooksNeighbours/Matr)[domain/grid_rel] / NeighboursWeight, 0[float32])";
		attribute<Classifications/LU/ForestType> ForestType(domain_grid): Expr = "Classifications/LU/ForestType/Back_rel[CaseData/JrcFactorData/TiffData/CorineGrid/CorineLandUse]";
		
		container Variables: expr = "for_each_nedv(Factors/Name, Factors/StartExpr, domain, float32)";

		parameter<string> GeneratedFiles: Expr = "OutputGeneration/OutputDirName+';'"; // ,ExplicitSuppliers = "OutputGeneration/ClippedLandUseVT;OutputGeneration/Clipped_Qi;";
		container OutputGeneration
		{
			parameter<String> OutputDirName := simulation_results/metadata/DirName + '_'+string(Periods/CurrYear[uint16(0)]);
			
			container Indicators;
						
			parameter<String> ClippedLandUseVT_FileName: Expr = "OutputDirName + '.tif'";
			parameter<String> Qi_FileName:				 Expr = "OutputDirName + '_Qi.tif'";
			
			attribute<Classifications/LU/ViewType> LandUseVT(domain_grid)
				:	Expr = "MakeDefined( Classifications/LU/ModelType/VT[ LandUse_Grid ], Classifications/LU/Corine/VT[ CaseData/JrcFactorData/TiffData/CorineGrid/CorineLandUse ])";
				
			attribute<Classifications/LU/ViewType> ClippedLandUseVT(domain_grid)
				:	Expr = "CaseData/Land/IsInRunRegion ? LandUseVT : value(0, Classifications/LU/ViewType)"
				,	StorageName = "=ClippedLandUseVT_FileName"
			{
				attribute<UInt32> PaletteData(Classifications/LU/ViewType): Expr = "Classifications/LU/ViewType/Color";
			}
			
			attribute<int32> Qi_Grid 	(domain_grid): expr = "int32(CaseData/getOptimalk/PopulationDistribution/Qi)[domain/BasisGrid]";
			
			attribute<int32> Clipped_Qi (domain_grid)
				:   Expr = "CaseData/Land/IsInRunRegion ? Qi_Grid : 0[int32]"
				,   StorageName = "=Qi_FileName";
			
			
		}
	}

	container TimeSteps: Expr = 
			"for_each_ne("
				"Periods/Name,"
				"'DynaClueTimeStep100(value('+Periods/YearStr+', YearRange),'+Periods/IdStr+','+Periods/ClaimFractionStr+',ModelType, domain_grid, domain,CaseData/OrgPopClaimRegion,CaseData/DestPopClaimRegion,'+Periods/PrevRef+')'"
			")";
	
 	container endstate: Expr = "='TimeSteps/'+Periods/Name[max(ID(Periods))]+'/ResultingState'"
 	{
// 		parameter<YearRange> RefTime:          Expr = "PLast/ResultingState/RefTime";
//		parameter<bool>      cumulStatusFlag:  Expr = "PLast/ResultingState/cumulStatusFlag";
	
	 	attribute<ModelType> discr_result(domain): Expr  = "LandUse";
	 	attribute<ModelType> changed_to  (domain): Expr = "(discr_result != StartingState/LandUse) ? discr_result          : value(0 / 0, ModelType)";
	 	attribute<ModelType> changed_from(domain): Expr = "(discr_result != StartingState/LandUse) ? StartingState/LandUse : value(0 / 0, ModelType)";
	}
	
	container simulation_results
		:	Descr = "Allocated landuse resulting from the balancing iteration + ground-price indication"
	{
		container metadata
		{
			parameter<String> DirName := RunParameters/OutputDir;
			
			attribute<string> AllocStatusPerPeriod(Periods): Expr = "='union_data(Periods, '+asItemList('TimeSteps/'+Periods/Name+'/d_alloc/status')+')'";
			parameter<string> AllocStatus: Expr = "asItemList(AllocStatusPerPeriod)";
			unit<uint32> AllocResults := ='union_unit('+AsItemList('TimeSteps/'+Periods/Name+'/ResultingState/AllocResults')+')'
			{
				attribute<string> PeriodName := ='union_data(., '+AsItemList('const('+Quote(Periods/Name)+', TimeSteps/'+Periods/Name+'/ResultingState/AllocResults)')+')';
				attribute<ModelType> ModelType_Rel := ='union_data(., '+AsItemList('TimeSteps/'+Periods/Name+'/ResultingState/AllocResults/ModelType_rel')+')';
				attribute<string> RegionTableName  := ='union_data(., '+AsItemList('TimeSteps/'+Periods/Name+'/ResultingState/AllocResults/RegionTableName')+')';
				attribute<string> RegionLabel:= ='union_data(., '+AsItemList('TimeSteps/'+Periods/Name+'/ResultingState/AllocResults/RegionLabel')+')';
				attribute<UInt32> DemandMin := ='union_data(., '+AsItemList('TimeSteps/'+Periods/Name+'/ResultingState/AllocResults/DemandMin')+')';
				attribute<UInt32> DemandMax := ='union_data(., '+AsItemList('TimeSteps/'+Periods/Name+'/ResultingState/AllocResults/DemandMax')+')';
				attribute<UInt32> Allocated := ='union_data(., '+AsItemList('TimeSteps/'+Periods/Name+'/ResultingState/AllocResults/Allocated')+')';
				attribute<bool >  Status    := ='union_data(., '+AsItemList('TimeSteps/'+Periods/Name+'/ResultingState/AllocResults/Status')+')';
			}
		}
		container landuse: Descr = "The resulting landuse is the combination of (iterator/allocated_landuse) and (exogeousLanduse)"
		{
//			attribute<ModelType> GridData(domain_grid): StorageName = "=metadata/DirName+'.tif'", Expr = "endState/LandUse_Grid"
			attribute<Classifications/LU/ViewType> GridData(domain_grid): StorageName = "=metadata/DirName+'_VT.tif'", Expr = "=Last('TimeSteps/'+Periods/Name+'/ResultingState/OutputGeneration/ClippedLandUseVT')"
			{
				attribute<UInt32> PaletteData(Classifications/LU/ViewType): Expr = "Classifications/LU/ViewType/Color";
			}

			container PerYear:     Expr = "for_each_nedvl(Periods/Name, 'TimeSteps/'+Periods/Name+'/ResultingState/LandUse', domain, ModelType, 'Land use '+Periods/YearStr)";
			container GridPerYear: Expr = "for_each_nedvl(Periods/Name, 'TimeSteps/'+Periods/Name+'/ResultingState/LandUse_Grid', domain_grid, ModelType, 'Land use '+Periods/YearStr)";
			container ClippedGridPerYearVT_Calculated: Expr = "for_each_nedv(Periods/Name, 'TimeSteps/'+Periods/Name+'/ResultingState/OutputGeneration/ClippedLandUseVT', domain_grid, Classifications/LU/ViewType)";
			
			// decoupled simulation for mozaiking
			container ClippedGridPerYearVT_ReadAlways: Expr = "for_each_ndva(Periods/Name, domain_grid, Classifications/LU/ViewType, '=TimeSteps/'+Periods/Name+'/ResultingState/OutputGeneration/ClippedLandUseVT_FileName')";
			container ClippedGridPerYearVT_ReadOnly: Expr = 
				"for_each_nedv(Periods/Name, "
					"'=ExistingFile(''C:/@'',TimeSteps/'+Periods/Name+'/ResultingState/OutputGeneration/ClippedLandUseVT_FileName) != ''C:/@'' ? ''ClippedGridPerYearVT_ReadAlways/'+Periods/Name+''': ''const(0[Classifications/LU/ViewType],domain_grid)''',"
					"domain_grid, Classifications/LU/ViewType"
					")";
			container ClippedQiPerYearVT_ReadOnly := for_each_ndva(Periods/Name, domain_grid, int32, '=TimeSteps/'+Periods/Name+'/ResultingState/OutputGeneration/Qi_FileName');
//			container DifQiPerYearVT_from_ReadOnly:= for_each_nedv(Periods/Name, '!IsNull(RunRegions/RasterSets/RunAreas) ? float32(ClippedQiPerYearVT_ReadOnly/' + Periods/Name + ') - CaseData/JrcFactorData/Population/Qi_2011 : float32(0)',  domain_grid, float32);
			
		}
		parameter<string>  GeneratedFiles := endState/GeneratedFiles, ExplicitSuppliers = "endState/GeneratedFiles"; // ;simulation_results/landuse/GridData";
		parameter<string>  GeneratedCapriFiles := 'Ready'
		, 	ExplicitSuppliers = 
				"TimeSteps/P2020/ResultingState/OutputGeneration/CapriResults;"
				"TimeSteps/P2025/ResultingState/OutputGeneration/CapriResults";
				
		parameter<string>  Generate2050 := 'Ready'
		, 	ExplicitSuppliers = 
				"TimeSteps/P2015/ResultingState/OutputGeneration/CapriResults;"
				"TimeSteps/P2020/ResultingState/OutputGeneration/CapriResults;"
				"TimeSteps/P2025/ResultingState/OutputGeneration/CapriResults;"
				"TimeSteps/P2030/ResultingState/OutputGeneration/CapriResults;"
				"TimeSteps/P2035/ResultingState/OutputGeneration/CapriResults;"
				"TimeSteps/P2040/ResultingState/OutputGeneration/CapriResults;"
				"TimeSteps/P2045/ResultingState/OutputGeneration/CapriResults;"
				"TimeSteps/P2050/ResultingState/OutputGeneration/CapriResults";
		
		unit<WPoint> ForestTransitionStatePerYear := range(wpoint, point(0w, 0w), point(uint16(#LU/ForestTransitionState), uint16(#Periods)))
		{
			attribute<uint32> count := ='union_data(., '+AsItemList(replace('pcount(ModelType/FTS_rel[TimeSteps/@P/ResultingState/landuse])','@P',Periods/Name))+' )';
			attribute<int32> relcount := int32(count) - int32(pcount(ModelType/FTS_rel[TimeSteps/P2015/ResultingState/landuse])[pointcol(ID(.))[LU/ForestTransitionState]]);
		}
	}
}
